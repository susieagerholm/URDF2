
grammar org.xtext.urdf.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.itu.dk/uRDF"
//import "http://www.example.org/uRDF" as uRDF
//generate myURDF "http://www.itu.dk/uRDF"


/*
 * Todo: 
 * Expressions - inline for value assignment 
 * Add Constant to parser rules: Should be alternative in all numeric expr - and for ID with String value  
 * Topology of Link and Joint: How to specify?
 * Add reflect as alternative in relevant places...
 * Add reuse grammar with reference to reused entity (mydot example from christian not working!)
 * Create ValueConverter (and possibly other stuff to parse reflect as negation of reused)
 * Create ValueConverter to convert scale values to Box
 * DONE: Create Constants datatype - signed numeric or string (incl concatenation with String)
 * DONE: Change interface to abstract class in metamodel
 * DONE: ReUse - add reference in the metamodel
 * DONE: Origin required should possibly be adjusted in metamodel?
 * DONE: Scientific notation - how to implement?
 * DONE: Origin xyz/rpy values + axis values - vector and single defs. Kill one of the definitions?
 * DONE: Origin values should be ('-')? INT or FLOAT or SCIENTIFIC - get SIGNED_NUMERIC class from metamodel...
 */

Robot:
	'Robot' name=ID
	 ('Topology' topologies+=Topology | 
	 	         links+=Link | 
	 	         joint+=Joint |
	 	         addto+=AddTo
	 )*
;

Topology:
	parent=[Link] (joint=JointRef child=Topology)?
;  

JointRef:
	 fix = '->' | rev = 'r->' | pris = 'p->' | cont = 'c->'  
;

ReUseAble: 
 	Link | Visual | Inertial | Collision
;

ReUseAbleReduced returns ReUseAble:
	Visual | Inertial | Collision
;

ReUseAbleReduce returns ReUseAble:
	Origin | Axis | Limit | Calibration | Dynamics | SafetyController
;
  
Link:
	{Link} 'Link' name=ID
	(('def' (inertial=Inertial | visual+=Visual | collision+=Collision)+)	 
		| ('reuse' isReuseOf=[Link] (reuse=Reuse)?)
	)?
;

AddTo:
	(AddToLink link=[Link] 
		add = ReUseAbleReduced ) | 
	(AddToJoint joint=[Joint]
		add =  ReUseAbleReduce   
	)
;

AddToLink:
	'Add' 'to' 'link'
;

AddToJoint:
	'Add' 'to' 'joint'
;

Reuse:
	{Reuse}  'add' add=ReUseAbleReduced | 'edit' edit=AssignNewValue
;


AssignNewValue:
	{AssignNewValue} getRef=DotExpression '=' newReuseable=ReUseAble
;


DotExpression returns Ref:
    ReUsableRef ({DotExpression.ref=current}  "." tail=[ReUseAble])*
;

ReUsableRef returns Ref: 
	{ReUsableRef} reuseable=[ReUseAble]
;

Inertial:
	{Inertial} 'Inertial' (name=ID)?
	inertia=Inertia
	mass=Mass
	(origin=Origin)?
;

Inertia:
	{Inertia} 'Inertia' (name=ID)?
	'ixx' ixx=URDFAttrSignedNumeric 
	'ixy' ixy=URDFAttrSignedNumeric
	'ixz' ixz=URDFAttrSignedNumeric
	'iyy' iyy=URDFAttrSignedNumeric
	'iyz' iyz=URDFAttrSignedNumeric
	'izz' izz=URDFAttrSignedNumeric
;


Visual:
	{Visual} 'Visual' (name=ID)? 
	'Geometry' geometry=Geometry
	(origin=Origin)?               //problem: Kan ikke definere material uden origin pt
	('Material' material=Material)? //problem: Kan ikke definere material uden origin pt
	
;

Origin:
    {Origin} 'Origin' (name=ID)?
    'x' x=URDFAttrSignedNumeric 
	'y' y=URDFAttrSignedNumeric
	'z' z=URDFAttrSignedNumeric
    ('roll' roll=URDFAttrSignedNumeric)?
	('pitch' pitch=URDFAttrSignedNumeric)? 
	('yaw' yaw=URDFAttrSignedNumeric)?
;

Mass:
	{Mass} 'Mass' (name=ID)?
	'massKilogram' massKilogram=URDFAttrSignedNumeric
;

Collision:
	'Collision' (name=ID)?
	'Geometry' geometry=Geometry
	(origin=Origin)?
;

Geometry:
	Box | Cylinder | Mesh | Sphere
	
;

//Tjek spec: order listing of dimensions?
Box:
	'Box' (name=ID)?
	'height' height=URDFAttrNumeric 
	'length' length=URDFAttrNumeric
	'width' width=URDFAttrNumeric 
;

Cylinder:
	'Cylinder' (name=ID)?
	'radius' radius=URDFAttrNumeric
	'length' length=URDFAttrNumeric	
;

//TODO: create ValueConverter to convert scale to Box
Mesh:
	'Mesh' (name=ID)?
	'pathToFile' pathToFile=URDFAttrSTRING
	//('scale' dimension=Box)?
;

Sphere:
	'Sphere' (name=ID)?
	'radius' radius=URDFAttrNumeric	
;

Material:
	Texture | Color 
;


Texture:
	'Texture' (name=ID)?
	'pathToFile' pathToFile=URDFAttrSTRING
;


// RGBA values must be floats between 0 and 1 incl 
Color:
	'Color' (name=ID)?
	'red' red=URDFAttrFloat 
	'green' green=URDFAttrFloat 
	'blue' blue=URDFAttrFloat 
	'alpha' alpha=URDFAttrFloat	
;

Joint:
	'Joint' name=ID
	(('def'  'ChildOf' childOf=[Link] 
			 'ParentOf' parentOf=[Link] 
			 'Type' type=JointType) 
			 ( origin=Origin | axis=Axis | limit=Limit | calibration=Calibration | dynamics=Dynamics | safetycontroller=SafetyController)* | 
	 //HOW TO REUSE: CHANGE PARENT AND CHILD LINKS??
	 ('reuse' isReuseOf=[Joint] 
	 	'ChildOf' childOf=[Link] 
		'ParentOf' parentOf=[Link] 
	 	(reuse=Reuse)?
	 )
	)
;

enum JointType:
		fixed = 'fixed' |revolute = 'revolute' |  prismatic = 'prismatic' | continuous = 'continuous'
;

/* Binary values must be 0 or 1 - digitsum must be 1, WHY NEED TO DEFINE ALL THREE?? */
//keyword aliases: 'xyz' or 'x', 'y', 'z'
Axis:
	'Axis' (name=ID)?
	'x' x=URDFAttrINT
	'y' y=URDFAttrINT
	'z' z=URDFAttrINT 
;

Limit:
	'Limit' (name=ID)?
	'effort' effort=URDFAttrSignedNumeric 
	'velocity' velocity=URDFAttrSignedNumeric 
	('lower' lower=URDFAttrSignedNumeric | 'upper' upper=URDFAttrSignedNumeric)* 
;

Calibration:
	 {Calibration} 'Calibration' (name=ID)?
	 ('rising' rising=URDFAttrSignedNumeric | 'falling' falling=URDFAttrSignedNumeric) 
;

Dynamics:
	{Dynamics} 'Dynamics' (name=ID)?
	('friction' friction=URDFAttrSignedNumeric | 'damping' damping=URDFAttrSignedNumeric)+
;


SafetyController:
	'SafetyController' (name=ID)?
	'k_velocity' k_velocity=URDFAttrSignedNumeric
	('k_position' k_position=URDFAttrSignedNumeric |
	 'softLowerLimit' softLowerLimit=URDFAttrSignedNumeric | 
	 'softUpperLimit' softUpperLimit=URDFAttrSignedNumeric)*
;


//Should we cut Mimic from the spec - NEED TO GET INTERPRETATION OF ATTRS??
/*Mimic:
	'Mimic' (name=ID)?
	'mimics' mimics=[Joint]
	('multiplier' multiplier=URDFAttrSignedNumeric)?
	('offSet' offSet=URDFAttrSignedNumeric)?
;*/


/*Constant:
;*/

URDFAttrSignedNumeric:
	value = SIGNED_NUMERIC
;

URDFAttrFloat:
	value = FLOAT
;

URDFAttrINT:
	value = INT
;

URDFAttrNumeric:
	value = NUMERIC
;

URDFAttrSTRING:
	value = STRING
;

FLOAT returns ecore::EFloat: 
	INT '.' INT
;

SCIENTIFIC returns ecore::EBigDecimal:
	FLOAT 'e' ('+' | '-')? INT 
;

SIGNED_NUMERIC:
	('-')? (INT | FLOAT | SCIENTIFIC)
;

NUMERIC:
	INT | FLOAT | SCIENTIFIC
;



