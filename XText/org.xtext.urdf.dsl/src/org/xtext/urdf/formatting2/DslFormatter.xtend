/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.formatting2

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.urdf.myURDF.Axis
import org.xtext.urdf.myURDF.Geometry
import org.xtext.urdf.myURDF.Joint
import org.xtext.urdf.myURDF.Limit
import org.xtext.urdf.myURDF.Link
import org.xtext.urdf.myURDF.Robot
import org.xtext.urdf.myURDF.MyURDFPackage
import org.xtext.urdf.myURDF.Visual
import org.xtext.urdf.myURDF.Robot
import org.xtext.urdf.myURDF.Joint
import org.xtext.urdf.myURDF.Link

//@Inject extension DslGrammarAccess

class DslFormatter extends AbstractFormatter2 {
	
	def dispatch void format(Robot robot, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		//add newline and no space after robot
		//robot.prepend[setNewLines(1, 1, 2); noSpace]
		//robot.regionFor.feature(MyURDFPackage.Literals.NAMED_ELEMENT__NAME).append[newLine]
		robot.interior[indent]
			
		for (Link link : robot.getLinks()) { link.format.prepend[setNewLines(1, 1, 2); noSpace] }
		for (Joint joint : robot.getJoint()) { joint.format.prepend[setNewLines(1, 1, 2); noSpace] }	
	}
	
	def dispatch void format(Link link, extension IFormattableDocument document) {
    // TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		link.interior[indent]
		/*for(Visual visual : link.getVisuals()) {
			visual.format.prepend[setNewLines(1, 1, 2); noSpace]
		}*/
    }
    
    def dispatch void format(Joint joint, extension IFormattableDocument document) {
		joint.interior[indent]
		joint.getChildOf().format.prepend[setNewLines(1, 1, 2); noSpace]
		joint.getParentOf().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getLimit().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getAxis().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getOrigin().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getDynamics().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getCalibration().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getMimic().format.prepend[setNewLines(1, 1, 2); noSpace]
		//joint.getSafetycontroller().format.prepend[setNewLines(1, 1, 2); noSpace]
	}
	
	def dispatch void format(Limit limit, extension IFormattableDocument document) {
		limit.interior[indent]
	}
	
	def dispatch void format(Axis axis, extension IFormattableDocument document) {
		axis.interior[indent]
	}
	
	def dispatch void format(Visual visual, extension IFormattableDocument document) {
		//visual.format.prepend[setNewLines(1, 1, 2); noSpace]
		visual.interior[indent]
		//visual.getGeometry().format.prepend[setNewLines(1, 1, 2); noSpace]
		visual.getOrigin().format.prepend[setNewLines(1, 1, 2); noSpace]
		//visual.getMaterial().format.prepend[setNewLines(1, 1, 2); noSpace]
	}
	
	def dispatch void format(Geometry geo, extension IFormattableDocument document) {
		geo.interior[indent]
		//geo.getShape().format.prepend[setNewLines(1, 1, 2); noSpace]
    }
	
	// TODO: implement for Joint, Inertial, Visual, Collision
}
