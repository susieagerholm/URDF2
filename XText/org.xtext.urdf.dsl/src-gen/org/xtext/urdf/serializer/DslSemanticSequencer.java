/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.urdf.myURDF.AddTo;
import org.xtext.urdf.myURDF.AssignNewValue;
import org.xtext.urdf.myURDF.Axis;
import org.xtext.urdf.myURDF.Box;
import org.xtext.urdf.myURDF.Calibration;
import org.xtext.urdf.myURDF.Collision;
import org.xtext.urdf.myURDF.Color;
import org.xtext.urdf.myURDF.Cylinder;
import org.xtext.urdf.myURDF.DotExpression;
import org.xtext.urdf.myURDF.Dynamics;
import org.xtext.urdf.myURDF.Inertia;
import org.xtext.urdf.myURDF.Inertial;
import org.xtext.urdf.myURDF.Joint;
import org.xtext.urdf.myURDF.JointRef;
import org.xtext.urdf.myURDF.Limit;
import org.xtext.urdf.myURDF.Link;
import org.xtext.urdf.myURDF.Mass;
import org.xtext.urdf.myURDF.Mesh;
import org.xtext.urdf.myURDF.MyURDFPackage;
import org.xtext.urdf.myURDF.Origin;
import org.xtext.urdf.myURDF.ReUsableRef;
import org.xtext.urdf.myURDF.Reuse;
import org.xtext.urdf.myURDF.Robot;
import org.xtext.urdf.myURDF.SafetyController;
import org.xtext.urdf.myURDF.Sphere;
import org.xtext.urdf.myURDF.Texture;
import org.xtext.urdf.myURDF.Topology;
import org.xtext.urdf.myURDF.URDFAttrFloat;
import org.xtext.urdf.myURDF.URDFAttrINT;
import org.xtext.urdf.myURDF.URDFAttrNumeric;
import org.xtext.urdf.myURDF.URDFAttrSTRING;
import org.xtext.urdf.myURDF.URDFAttrSignedNumeric;
import org.xtext.urdf.myURDF.Visual;
import org.xtext.urdf.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyURDFPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyURDFPackage.ADD_TO:
				sequence_AddTo(context, (AddTo) semanticObject); 
				return; 
			case MyURDFPackage.ASSIGN_NEW_VALUE:
				sequence_AssignNewValue(context, (AssignNewValue) semanticObject); 
				return; 
			case MyURDFPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case MyURDFPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case MyURDFPackage.CALIBRATION:
				sequence_Calibration(context, (Calibration) semanticObject); 
				return; 
			case MyURDFPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case MyURDFPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case MyURDFPackage.CYLINDER:
				sequence_Cylinder(context, (Cylinder) semanticObject); 
				return; 
			case MyURDFPackage.DOT_EXPRESSION:
				sequence_DotExpression(context, (DotExpression) semanticObject); 
				return; 
			case MyURDFPackage.DYNAMICS:
				sequence_Dynamics(context, (Dynamics) semanticObject); 
				return; 
			case MyURDFPackage.INERTIA:
				sequence_Inertia(context, (Inertia) semanticObject); 
				return; 
			case MyURDFPackage.INERTIAL:
				sequence_Inertial(context, (Inertial) semanticObject); 
				return; 
			case MyURDFPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case MyURDFPackage.JOINT_REF:
				sequence_JointRef(context, (JointRef) semanticObject); 
				return; 
			case MyURDFPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case MyURDFPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case MyURDFPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case MyURDFPackage.MESH:
				sequence_Mesh(context, (Mesh) semanticObject); 
				return; 
			case MyURDFPackage.ORIGIN:
				sequence_Origin(context, (Origin) semanticObject); 
				return; 
			case MyURDFPackage.RE_USABLE_REF:
				sequence_ReUsableRef(context, (ReUsableRef) semanticObject); 
				return; 
			case MyURDFPackage.REUSE:
				sequence_Reuse(context, (Reuse) semanticObject); 
				return; 
			case MyURDFPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case MyURDFPackage.SAFETY_CONTROLLER:
				sequence_SafetyController(context, (SafetyController) semanticObject); 
				return; 
			case MyURDFPackage.SPHERE:
				sequence_Sphere(context, (Sphere) semanticObject); 
				return; 
			case MyURDFPackage.TEXTURE:
				sequence_Texture(context, (Texture) semanticObject); 
				return; 
			case MyURDFPackage.TOPOLOGY:
				sequence_Topology(context, (Topology) semanticObject); 
				return; 
			case MyURDFPackage.URDF_ATTR_FLOAT:
				sequence_URDFAttrFloat(context, (URDFAttrFloat) semanticObject); 
				return; 
			case MyURDFPackage.URDF_ATTR_INT:
				sequence_URDFAttrINT(context, (URDFAttrINT) semanticObject); 
				return; 
			case MyURDFPackage.URDF_ATTR_NUMERIC:
				sequence_URDFAttrNumeric(context, (URDFAttrNumeric) semanticObject); 
				return; 
			case MyURDFPackage.URDF_ATTR_STRING:
				sequence_URDFAttrSTRING(context, (URDFAttrSTRING) semanticObject); 
				return; 
			case MyURDFPackage.URDF_ATTR_SIGNED_NUMERIC:
				sequence_URDFAttrSignedNumeric(context, (URDFAttrSignedNumeric) semanticObject); 
				return; 
			case MyURDFPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AddTo returns AddTo
	 *
	 * Constraint:
	 *     ((link=[Link|ID] add=ReUseAbleReduced) | (joint=[Joint|ID] add=ReUseAbleReduce))
	 */
	protected void sequence_AddTo(ISerializationContext context, AddTo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AssignNewValue returns AssignNewValue
	 *
	 * Constraint:
	 *     (getRef=DotExpression newReuseable=ReUseAble)
	 */
	protected void sequence_AssignNewValue(ISerializationContext context, AssignNewValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.ASSIGN_NEW_VALUE__GET_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.ASSIGN_NEW_VALUE__GET_REF));
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.ASSIGN_NEW_VALUE__NEW_REUSEABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.ASSIGN_NEW_VALUE__NEW_REUSEABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignNewValueAccess().getGetRefDotExpressionParserRuleCall_1_0(), semanticObject.getGetRef());
		feeder.accept(grammarAccess.getAssignNewValueAccess().getNewReuseableReUseAbleParserRuleCall_3_0(), semanticObject.getNewReuseable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAbleReduce returns Axis
	 *     Axis returns Axis
	 *
	 * Constraint:
	 *     (name=ID? x=URDFAttrINT y=URDFAttrINT z=URDFAttrINT)
	 */
	protected void sequence_Axis(ISerializationContext context, Axis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Box
	 *     Box returns Box
	 *
	 * Constraint:
	 *     (name=ID? height=URDFAttrNumeric length=URDFAttrNumeric width=URDFAttrNumeric)
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAbleReduce returns Calibration
	 *     Calibration returns Calibration
	 *
	 * Constraint:
	 *     (name=ID? (rising=URDFAttrSignedNumeric | falling=URDFAttrSignedNumeric))
	 */
	protected void sequence_Calibration(ISerializationContext context, Calibration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAble returns Collision
	 *     ReUseAbleReduced returns Collision
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (name=ID? geometry=Geometry origin=Origin?)
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Color
	 *     Color returns Color
	 *
	 * Constraint:
	 *     (name=ID? red=URDFAttrFloat green=URDFAttrFloat blue=URDFAttrFloat alpha=URDFAttrFloat)
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Cylinder
	 *     Cylinder returns Cylinder
	 *
	 * Constraint:
	 *     (name=ID? radius=URDFAttrNumeric length=URDFAttrNumeric)
	 */
	protected void sequence_Cylinder(ISerializationContext context, Cylinder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DotExpression returns DotExpression
	 *     DotExpression.DotExpression_1_0 returns DotExpression
	 *
	 * Constraint:
	 *     (ref=DotExpression_DotExpression_1_0 tail=[ReUseAble|ID])
	 */
	protected void sequence_DotExpression(ISerializationContext context, DotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.DOT_EXPRESSION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.DOT_EXPRESSION__REF));
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.DOT_EXPRESSION__TAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.DOT_EXPRESSION__TAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDotExpressionAccess().getDotExpressionRefAction_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDotExpressionAccess().getTailReUseAbleIDTerminalRuleCall_1_2_0_1(), semanticObject.getTail());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAbleReduce returns Dynamics
	 *     Dynamics returns Dynamics
	 *
	 * Constraint:
	 *     (name=ID? (friction=URDFAttrSignedNumeric | damping=URDFAttrSignedNumeric)+)
	 */
	protected void sequence_Dynamics(ISerializationContext context, Dynamics semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertia returns Inertia
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         ixx=URDFAttrSignedNumeric 
	 *         ixy=URDFAttrSignedNumeric 
	 *         ixz=URDFAttrSignedNumeric 
	 *         iyy=URDFAttrSignedNumeric 
	 *         iyz=URDFAttrSignedNumeric 
	 *         izz=URDFAttrSignedNumeric
	 *     )
	 */
	protected void sequence_Inertia(ISerializationContext context, Inertia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAble returns Inertial
	 *     ReUseAbleReduced returns Inertial
	 *     Inertial returns Inertial
	 *
	 * Constraint:
	 *     (name=ID? inertia=Inertia mass=Mass origin=Origin?)
	 */
	protected void sequence_Inertial(ISerializationContext context, Inertial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JointRef returns JointRef
	 *
	 * Constraint:
	 *     (fix='->' | rev='r->' | pris='p->' | cont='c->')
	 */
	protected void sequence_JointRef(ISerializationContext context, JointRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             (
	 *                 childOf=[Link|ID] 
	 *                 parentOf=[Link|ID] 
	 *                 type=JointType 
	 *                 (
	 *                     origin=Origin | 
	 *                     axis=Axis | 
	 *                     limit=Limit | 
	 *                     calibration=Calibration | 
	 *                     dynamics=Dynamics | 
	 *                     safetycontroller=SafetyController
	 *                 )*
	 *             ) | 
	 *             (isReuseOf=[Joint|ID] childOf=[Link|ID] parentOf=[Link|ID] reuse=Reuse?)
	 *         )
	 *     )
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAbleReduce returns Limit
	 *     Limit returns Limit
	 *
	 * Constraint:
	 *     (name=ID? effort=URDFAttrSignedNumeric velocity=URDFAttrSignedNumeric (lower=URDFAttrSignedNumeric | upper=URDFAttrSignedNumeric)*)
	 */
	protected void sequence_Limit(ISerializationContext context, Limit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAble returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID ((inertial=Inertial | visual+=Visual | collision+=Collision)+ | (isReuseOf=[Link|ID] reuse=Reuse?))?)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     (name=ID? massKilogram=URDFAttrSignedNumeric)
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Mesh
	 *     Mesh returns Mesh
	 *
	 * Constraint:
	 *     (name=ID? pathToFile=URDFAttrSTRING)
	 */
	protected void sequence_Mesh(ISerializationContext context, Mesh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAbleReduce returns Origin
	 *     Origin returns Origin
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         x=URDFAttrSignedNumeric 
	 *         y=URDFAttrSignedNumeric 
	 *         z=URDFAttrSignedNumeric 
	 *         roll=URDFAttrSignedNumeric? 
	 *         pitch=URDFAttrSignedNumeric? 
	 *         yaw=URDFAttrSignedNumeric?
	 *     )
	 */
	protected void sequence_Origin(ISerializationContext context, Origin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DotExpression returns ReUsableRef
	 *     DotExpression.DotExpression_1_0 returns ReUsableRef
	 *     ReUsableRef returns ReUsableRef
	 *
	 * Constraint:
	 *     reuseable=[ReUseAble|ID]
	 */
	protected void sequence_ReUsableRef(ISerializationContext context, ReUsableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.RE_USABLE_REF__REUSEABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.RE_USABLE_REF__REUSEABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReUsableRefAccess().getReuseableReUseAbleIDTerminalRuleCall_1_0_1(), semanticObject.getReuseable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reuse returns Reuse
	 *
	 * Constraint:
	 *     (add=ReUseAbleReduced | edit=AssignNewValue)
	 */
	protected void sequence_Reuse(ISerializationContext context, Reuse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID (topologies+=Topology | links+=Link | joint+=Joint | addto+=AddTo)*)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAbleReduce returns SafetyController
	 *     SafetyController returns SafetyController
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         k_velocity=URDFAttrSignedNumeric 
	 *         (k_position=URDFAttrSignedNumeric | softLowerLimit=URDFAttrSignedNumeric | softUpperLimit=URDFAttrSignedNumeric)*
	 *     )
	 */
	protected void sequence_SafetyController(ISerializationContext context, SafetyController semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Sphere
	 *     Sphere returns Sphere
	 *
	 * Constraint:
	 *     (name=ID? radius=URDFAttrNumeric)
	 */
	protected void sequence_Sphere(ISerializationContext context, Sphere semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Texture
	 *     Texture returns Texture
	 *
	 * Constraint:
	 *     (name=ID? pathToFile=URDFAttrSTRING)
	 */
	protected void sequence_Texture(ISerializationContext context, Texture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Topology returns Topology
	 *
	 * Constraint:
	 *     (parent=[Link|ID] (joint=JointRef child=Topology)?)
	 */
	protected void sequence_Topology(ISerializationContext context, Topology semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URDFAttrFloat returns URDFAttrFloat
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_URDFAttrFloat(ISerializationContext context, URDFAttrFloat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.URDF_ATTR_FLOAT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.URDF_ATTR_FLOAT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURDFAttrFloatAccess().getValueFLOATParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URDFAttrINT returns URDFAttrINT
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_URDFAttrINT(ISerializationContext context, URDFAttrINT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.URDF_ATTR_INT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.URDF_ATTR_INT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURDFAttrINTAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URDFAttrNumeric returns URDFAttrNumeric
	 *
	 * Constraint:
	 *     value=NUMERIC
	 */
	protected void sequence_URDFAttrNumeric(ISerializationContext context, URDFAttrNumeric semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.URDF_ATTR_NUMERIC__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.URDF_ATTR_NUMERIC__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURDFAttrNumericAccess().getValueNUMERICParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URDFAttrSTRING returns URDFAttrSTRING
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_URDFAttrSTRING(ISerializationContext context, URDFAttrSTRING semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.URDF_ATTR_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.URDF_ATTR_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURDFAttrSTRINGAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URDFAttrSignedNumeric returns URDFAttrSignedNumeric
	 *
	 * Constraint:
	 *     value=SIGNED_NUMERIC
	 */
	protected void sequence_URDFAttrSignedNumeric(ISerializationContext context, URDFAttrSignedNumeric semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyURDFPackage.Literals.URDF_ATTR_SIGNED_NUMERIC__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyURDFPackage.Literals.URDF_ATTR_SIGNED_NUMERIC__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURDFAttrSignedNumericAccess().getValueSIGNED_NUMERICParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReUseAble returns Visual
	 *     ReUseAbleReduced returns Visual
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     (name=ID? geometry=Geometry origin=Origin? material=Material?)
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
