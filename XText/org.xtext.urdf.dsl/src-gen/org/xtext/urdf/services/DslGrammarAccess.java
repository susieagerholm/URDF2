/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cTopologyKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTopologiesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTopologiesTopologyParserRuleCall_2_0_1_0 = (RuleCall)cTopologiesAssignment_2_0_1.eContents().get(0);
		private final Assignment cLinksAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_2_1_0 = (RuleCall)cLinksAssignment_2_1.eContents().get(0);
		private final Assignment cJointAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cJointJointParserRuleCall_2_2_0 = (RuleCall)cJointAssignment_2_2.eContents().get(0);
		private final Assignment cAddtoAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cAddtoAddToParserRuleCall_2_3_0 = (RuleCall)cAddtoAssignment_2_3.eContents().get(0);
		
		////import "http://www.example.org/uRDF" as uRDF
		// //generate myURDF "http://www.itu.dk/uRDF"
		//
		/// *
		// * Todo: 
		// * Expressions - inline for value assignment 
		// * Add Constant to parser rules: Should be alternative in all numeric expr - and for ID with String value  
		// * Topology of Link and Joint: How to specify?
		// * Add reflect as alternative in relevant places...
		// * Add reuse grammar with reference to reused entity (mydot example from christian not working!)
		// * Create ValueConverter (and possibly other stuff to parse reflect as negation of reused)
		// * Create ValueConverter to convert scale values to Box
		// * DONE: Create Constants datatype - signed numeric or string (incl concatenation with String)
		// * DONE: Change interface to abstract class in metamodel
		// * DONE: ReUse - add reference in the metamodel
		// * DONE: Origin required should possibly be adjusted in metamodel?
		// * DONE: Scientific notation - how to implement?
		// * DONE: Origin xyz/rpy values + axis values - vector and single defs. Kill one of the definitions?
		// * DONE: Origin values should be ('-')? INT or FLOAT or SCIENTIFIC - get SIGNED_NUMERIC class from metamodel...
		// * /
		//Robot:
		//	'Robot' name=ID ('Topology' topologies+=Topology | links+=Link | joint+=Joint | addto+=AddTo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID ('Topology' topologies+=Topology | links+=Link | joint+=Joint | addto+=AddTo)*
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('Topology' topologies+=Topology | links+=Link | joint+=Joint | addto+=AddTo)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Topology' topologies+=Topology
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'Topology'
		public Keyword getTopologyKeyword_2_0_0() { return cTopologyKeyword_2_0_0; }
		
		//topologies+=Topology
		public Assignment getTopologiesAssignment_2_0_1() { return cTopologiesAssignment_2_0_1; }
		
		//Topology
		public RuleCall getTopologiesTopologyParserRuleCall_2_0_1_0() { return cTopologiesTopologyParserRuleCall_2_0_1_0; }
		
		//links+=Link
		public Assignment getLinksAssignment_2_1() { return cLinksAssignment_2_1; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_2_1_0() { return cLinksLinkParserRuleCall_2_1_0; }
		
		//joint+=Joint
		public Assignment getJointAssignment_2_2() { return cJointAssignment_2_2; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_2_2_0() { return cJointJointParserRuleCall_2_2_0; }
		
		//addto+=AddTo
		public Assignment getAddtoAssignment_2_3() { return cAddtoAssignment_2_3; }
		
		//AddTo
		public RuleCall getAddtoAddToParserRuleCall_2_3_0() { return cAddtoAddToParserRuleCall_2_3_0; }
	}
	public class TopologyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Topology");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParentLinkCrossReference_0_0 = (CrossReference)cParentAssignment_0.eContents().get(0);
		private final RuleCall cParentLinkIDTerminalRuleCall_0_0_1 = (RuleCall)cParentLinkCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cJointAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cJointJointRefParserRuleCall_1_0_0 = (RuleCall)cJointAssignment_1_0.eContents().get(0);
		private final Assignment cChildAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChildTopologyParserRuleCall_1_1_0 = (RuleCall)cChildAssignment_1_1.eContents().get(0);
		
		//Topology:
		//	parent=[Link] (joint=JointRef child=Topology)?;
		@Override public ParserRule getRule() { return rule; }
		
		//parent=[Link] (joint=JointRef child=Topology)?
		public Group getGroup() { return cGroup; }
		
		//parent=[Link]
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }
		
		//[Link]
		public CrossReference getParentLinkCrossReference_0_0() { return cParentLinkCrossReference_0_0; }
		
		//ID
		public RuleCall getParentLinkIDTerminalRuleCall_0_0_1() { return cParentLinkIDTerminalRuleCall_0_0_1; }
		
		//(joint=JointRef child=Topology)?
		public Group getGroup_1() { return cGroup_1; }
		
		//joint=JointRef
		public Assignment getJointAssignment_1_0() { return cJointAssignment_1_0; }
		
		//JointRef
		public RuleCall getJointJointRefParserRuleCall_1_0_0() { return cJointJointRefParserRuleCall_1_0_0; }
		
		//child=Topology
		public Assignment getChildAssignment_1_1() { return cChildAssignment_1_1; }
		
		//Topology
		public RuleCall getChildTopologyParserRuleCall_1_1_0() { return cChildTopologyParserRuleCall_1_1_0; }
	}
	public class JointRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.JointRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFixAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFixHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cFixAssignment_0.eContents().get(0);
		private final Assignment cRevAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRevRKeyword_1_0 = (Keyword)cRevAssignment_1.eContents().get(0);
		private final Assignment cPrisAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPrisPKeyword_2_0 = (Keyword)cPrisAssignment_2.eContents().get(0);
		private final Assignment cContAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cContCKeyword_3_0 = (Keyword)cContAssignment_3.eContents().get(0);
		
		//JointRef:
		//	fix='->' | rev='r->' | pris='p->' | cont='c->';
		@Override public ParserRule getRule() { return rule; }
		
		//fix='->' | rev='r->' | pris='p->' | cont='c->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fix='->'
		public Assignment getFixAssignment_0() { return cFixAssignment_0; }
		
		//'->'
		public Keyword getFixHyphenMinusGreaterThanSignKeyword_0_0() { return cFixHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//rev='r->'
		public Assignment getRevAssignment_1() { return cRevAssignment_1; }
		
		//'r->'
		public Keyword getRevRKeyword_1_0() { return cRevRKeyword_1_0; }
		
		//pris='p->'
		public Assignment getPrisAssignment_2() { return cPrisAssignment_2; }
		
		//'p->'
		public Keyword getPrisPKeyword_2_0() { return cPrisPKeyword_2_0; }
		
		//cont='c->'
		public Assignment getContAssignment_3() { return cContAssignment_3; }
		
		//'c->'
		public Keyword getContCKeyword_3_0() { return cContCKeyword_3_0; }
	}
	public class ReUseAbleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.ReUseAble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVisualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInertialParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCollisionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ReUseAble:
		//	Link | Visual | Inertial | Collision;
		@Override public ParserRule getRule() { return rule; }
		
		//Link | Visual | Inertial | Collision
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Link
		public RuleCall getLinkParserRuleCall_0() { return cLinkParserRuleCall_0; }
		
		//Visual
		public RuleCall getVisualParserRuleCall_1() { return cVisualParserRuleCall_1; }
		
		//Inertial
		public RuleCall getInertialParserRuleCall_2() { return cInertialParserRuleCall_2; }
		
		//Collision
		public RuleCall getCollisionParserRuleCall_3() { return cCollisionParserRuleCall_3; }
	}
	public class ReUseAbleReducedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.ReUseAbleReduced");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisualParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInertialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCollisionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReUseAbleReduced ReUseAble:
		//	Visual | Inertial | Collision
		@Override public ParserRule getRule() { return rule; }
		
		//Visual | Inertial | Collision
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Visual
		public RuleCall getVisualParserRuleCall_0() { return cVisualParserRuleCall_0; }
		
		//Inertial
		public RuleCall getInertialParserRuleCall_1() { return cInertialParserRuleCall_1; }
		
		//Collision
		public RuleCall getCollisionParserRuleCall_2() { return cCollisionParserRuleCall_2; }
	}
	public class ReUseAbleReduceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.ReUseAbleReduce");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOriginParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAxisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLimitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCalibrationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDynamicsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSafetyControllerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ReUseAbleReduce ReUseAble:
		//	Origin | Axis | Limit | Calibration | Dynamics | SafetyController
		@Override public ParserRule getRule() { return rule; }
		
		//Origin | Axis | Limit | Calibration | Dynamics | SafetyController
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Origin
		public RuleCall getOriginParserRuleCall_0() { return cOriginParserRuleCall_0; }
		
		//Axis
		public RuleCall getAxisParserRuleCall_1() { return cAxisParserRuleCall_1; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_2() { return cLimitParserRuleCall_2; }
		
		//Calibration
		public RuleCall getCalibrationParserRuleCall_3() { return cCalibrationParserRuleCall_3; }
		
		//Dynamics
		public RuleCall getDynamicsParserRuleCall_4() { return cDynamicsParserRuleCall_4; }
		
		//SafetyController
		public RuleCall getSafetyControllerParserRuleCall_5() { return cSafetyControllerParserRuleCall_5; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cDefKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cInertialAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cInertialInertialParserRuleCall_3_0_1_0_0 = (RuleCall)cInertialAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cVisualAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cVisualVisualParserRuleCall_3_0_1_1_0 = (RuleCall)cVisualAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cCollisionAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cCollisionCollisionParserRuleCall_3_0_1_2_0 = (RuleCall)cCollisionAssignment_3_0_1_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cReuseKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cIsReuseOfAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cIsReuseOfLinkCrossReference_3_1_1_0 = (CrossReference)cIsReuseOfAssignment_3_1_1.eContents().get(0);
		private final RuleCall cIsReuseOfLinkIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cIsReuseOfLinkCrossReference_3_1_1_0.eContents().get(1);
		private final Assignment cReuseAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cReuseReuseParserRuleCall_3_1_2_0 = (RuleCall)cReuseAssignment_3_1_2.eContents().get(0);
		
		//Link:
		//	{Link} 'Link' name=ID ('def' (inertial=Inertial | visual+=Visual | collision+=Collision)+ | 'reuse' isReuseOf=[Link]
		//	reuse=Reuse?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Link} 'Link' name=ID ('def' (inertial=Inertial | visual+=Visual | collision+=Collision)+ | 'reuse' isReuseOf=[Link]
		//reuse=Reuse?)?
		public Group getGroup() { return cGroup; }
		
		//{Link}
		public Action getLinkAction_0() { return cLinkAction_0; }
		
		//'Link'
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('def' (inertial=Inertial | visual+=Visual | collision+=Collision)+ | 'reuse' isReuseOf=[Link] reuse=Reuse?)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'def' (inertial=Inertial | visual+=Visual | collision+=Collision)+
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'def'
		public Keyword getDefKeyword_3_0_0() { return cDefKeyword_3_0_0; }
		
		//(inertial=Inertial | visual+=Visual | collision+=Collision)+
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//inertial=Inertial
		public Assignment getInertialAssignment_3_0_1_0() { return cInertialAssignment_3_0_1_0; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_3_0_1_0_0() { return cInertialInertialParserRuleCall_3_0_1_0_0; }
		
		//visual+=Visual
		public Assignment getVisualAssignment_3_0_1_1() { return cVisualAssignment_3_0_1_1; }
		
		//Visual
		public RuleCall getVisualVisualParserRuleCall_3_0_1_1_0() { return cVisualVisualParserRuleCall_3_0_1_1_0; }
		
		//collision+=Collision
		public Assignment getCollisionAssignment_3_0_1_2() { return cCollisionAssignment_3_0_1_2; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_3_0_1_2_0() { return cCollisionCollisionParserRuleCall_3_0_1_2_0; }
		
		//'reuse' isReuseOf=[Link] reuse=Reuse?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'reuse'
		public Keyword getReuseKeyword_3_1_0() { return cReuseKeyword_3_1_0; }
		
		//isReuseOf=[Link]
		public Assignment getIsReuseOfAssignment_3_1_1() { return cIsReuseOfAssignment_3_1_1; }
		
		//[Link]
		public CrossReference getIsReuseOfLinkCrossReference_3_1_1_0() { return cIsReuseOfLinkCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getIsReuseOfLinkIDTerminalRuleCall_3_1_1_0_1() { return cIsReuseOfLinkIDTerminalRuleCall_3_1_1_0_1; }
		
		//reuse=Reuse?
		public Assignment getReuseAssignment_3_1_2() { return cReuseAssignment_3_1_2; }
		
		//Reuse
		public RuleCall getReuseReuseParserRuleCall_3_1_2_0() { return cReuseReuseParserRuleCall_3_1_2_0; }
	}
	public class AddToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.AddTo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAddToLinkParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cLinkAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cLinkLinkCrossReference_0_1_0 = (CrossReference)cLinkAssignment_0_1.eContents().get(0);
		private final RuleCall cLinkLinkIDTerminalRuleCall_0_1_0_1 = (RuleCall)cLinkLinkCrossReference_0_1_0.eContents().get(1);
		private final Assignment cAddAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAddReUseAbleReducedParserRuleCall_0_2_0 = (RuleCall)cAddAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAddToJointParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cJointAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cJointJointCrossReference_1_1_0 = (CrossReference)cJointAssignment_1_1.eContents().get(0);
		private final RuleCall cJointJointIDTerminalRuleCall_1_1_0_1 = (RuleCall)cJointJointCrossReference_1_1_0.eContents().get(1);
		private final Assignment cAddAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAddReUseAbleReduceParserRuleCall_1_2_0 = (RuleCall)cAddAssignment_1_2.eContents().get(0);
		
		//AddTo:
		//	AddToLink link=[Link] add=ReUseAbleReduced | AddToJoint joint=[Joint] add=ReUseAbleReduce;
		@Override public ParserRule getRule() { return rule; }
		
		//AddToLink link=[Link] add=ReUseAbleReduced | AddToJoint joint=[Joint] add=ReUseAbleReduce
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddToLink link=[Link] add=ReUseAbleReduced
		public Group getGroup_0() { return cGroup_0; }
		
		//AddToLink
		public RuleCall getAddToLinkParserRuleCall_0_0() { return cAddToLinkParserRuleCall_0_0; }
		
		//link=[Link]
		public Assignment getLinkAssignment_0_1() { return cLinkAssignment_0_1; }
		
		//[Link]
		public CrossReference getLinkLinkCrossReference_0_1_0() { return cLinkLinkCrossReference_0_1_0; }
		
		//ID
		public RuleCall getLinkLinkIDTerminalRuleCall_0_1_0_1() { return cLinkLinkIDTerminalRuleCall_0_1_0_1; }
		
		//add=ReUseAbleReduced
		public Assignment getAddAssignment_0_2() { return cAddAssignment_0_2; }
		
		//ReUseAbleReduced
		public RuleCall getAddReUseAbleReducedParserRuleCall_0_2_0() { return cAddReUseAbleReducedParserRuleCall_0_2_0; }
		
		//AddToJoint joint=[Joint] add=ReUseAbleReduce
		public Group getGroup_1() { return cGroup_1; }
		
		//AddToJoint
		public RuleCall getAddToJointParserRuleCall_1_0() { return cAddToJointParserRuleCall_1_0; }
		
		//joint=[Joint]
		public Assignment getJointAssignment_1_1() { return cJointAssignment_1_1; }
		
		//[Joint]
		public CrossReference getJointJointCrossReference_1_1_0() { return cJointJointCrossReference_1_1_0; }
		
		//ID
		public RuleCall getJointJointIDTerminalRuleCall_1_1_0_1() { return cJointJointIDTerminalRuleCall_1_1_0_1; }
		
		//add=ReUseAbleReduce
		public Assignment getAddAssignment_1_2() { return cAddAssignment_1_2; }
		
		//ReUseAbleReduce
		public RuleCall getAddReUseAbleReduceParserRuleCall_1_2_0() { return cAddReUseAbleReduceParserRuleCall_1_2_0; }
	}
	public class AddToLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.AddToLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLinkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddToLink:
		//	'Add' 'to' 'link';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add' 'to' 'link'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'link'
		public Keyword getLinkKeyword_2() { return cLinkKeyword_2; }
	}
	public class AddToJointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.AddToJoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJointKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddToJoint:
		//	'Add' 'to' 'joint';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add' 'to' 'joint'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'joint'
		public Keyword getJointKeyword_2() { return cJointKeyword_2; }
	}
	public class ReuseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Reuse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReuseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAddKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAddAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAddReUseAbleReducedParserRuleCall_0_2_0 = (RuleCall)cAddAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEditKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEditAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEditAssignNewValueParserRuleCall_1_1_0 = (RuleCall)cEditAssignment_1_1.eContents().get(0);
		
		//Reuse:
		//	{Reuse} 'add' add=ReUseAbleReduced | 'edit' edit=AssignNewValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{Reuse} 'add' add=ReUseAbleReduced | 'edit' edit=AssignNewValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Reuse} 'add' add=ReUseAbleReduced
		public Group getGroup_0() { return cGroup_0; }
		
		//{Reuse}
		public Action getReuseAction_0_0() { return cReuseAction_0_0; }
		
		//'add'
		public Keyword getAddKeyword_0_1() { return cAddKeyword_0_1; }
		
		//add=ReUseAbleReduced
		public Assignment getAddAssignment_0_2() { return cAddAssignment_0_2; }
		
		//ReUseAbleReduced
		public RuleCall getAddReUseAbleReducedParserRuleCall_0_2_0() { return cAddReUseAbleReducedParserRuleCall_0_2_0; }
		
		//'edit' edit=AssignNewValue
		public Group getGroup_1() { return cGroup_1; }
		
		//'edit'
		public Keyword getEditKeyword_1_0() { return cEditKeyword_1_0; }
		
		//edit=AssignNewValue
		public Assignment getEditAssignment_1_1() { return cEditAssignment_1_1; }
		
		//AssignNewValue
		public RuleCall getEditAssignNewValueParserRuleCall_1_1_0() { return cEditAssignNewValueParserRuleCall_1_1_0; }
	}
	public class AssignNewValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.AssignNewValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignNewValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGetRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGetRefDotExpressionParserRuleCall_1_0 = (RuleCall)cGetRefAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewReuseableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewReuseableReUseAbleParserRuleCall_3_0 = (RuleCall)cNewReuseableAssignment_3.eContents().get(0);
		
		//AssignNewValue:
		//	{AssignNewValue} getRef=DotExpression '=' newReuseable=ReUseAble;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignNewValue} getRef=DotExpression '=' newReuseable=ReUseAble
		public Group getGroup() { return cGroup; }
		
		//{AssignNewValue}
		public Action getAssignNewValueAction_0() { return cAssignNewValueAction_0; }
		
		//getRef=DotExpression
		public Assignment getGetRefAssignment_1() { return cGetRefAssignment_1; }
		
		//DotExpression
		public RuleCall getGetRefDotExpressionParserRuleCall_1_0() { return cGetRefDotExpressionParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//newReuseable=ReUseAble
		public Assignment getNewReuseableAssignment_3() { return cNewReuseableAssignment_3; }
		
		//ReUseAble
		public RuleCall getNewReuseableReUseAbleParserRuleCall_3_0() { return cNewReuseableReUseAbleParserRuleCall_3_0; }
	}
	public class DotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.DotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReUsableRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDotExpressionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTailReUseAbleCrossReference_1_2_0 = (CrossReference)cTailAssignment_1_2.eContents().get(0);
		private final RuleCall cTailReUseAbleIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTailReUseAbleCrossReference_1_2_0.eContents().get(1);
		
		//DotExpression Ref:
		//	ReUsableRef ({DotExpression.ref=current} "." tail=[ReUseAble])*
		@Override public ParserRule getRule() { return rule; }
		
		//ReUsableRef ({DotExpression.ref=current} "." tail=[ReUseAble])*
		public Group getGroup() { return cGroup; }
		
		//ReUsableRef
		public RuleCall getReUsableRefParserRuleCall_0() { return cReUsableRefParserRuleCall_0; }
		
		//({DotExpression.ref=current} "." tail=[ReUseAble])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{DotExpression.ref=current}
		public Action getDotExpressionRefAction_1_0() { return cDotExpressionRefAction_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//tail=[ReUseAble]
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }
		
		//[ReUseAble]
		public CrossReference getTailReUseAbleCrossReference_1_2_0() { return cTailReUseAbleCrossReference_1_2_0; }
		
		//ID
		public RuleCall getTailReUseAbleIDTerminalRuleCall_1_2_0_1() { return cTailReUseAbleIDTerminalRuleCall_1_2_0_1; }
	}
	public class ReUsableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.ReUsableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReUsableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReuseableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReuseableReUseAbleCrossReference_1_0 = (CrossReference)cReuseableAssignment_1.eContents().get(0);
		private final RuleCall cReuseableReUseAbleIDTerminalRuleCall_1_0_1 = (RuleCall)cReuseableReUseAbleCrossReference_1_0.eContents().get(1);
		
		//ReUsableRef Ref:
		//	{ReUsableRef} reuseable=[ReUseAble]
		@Override public ParserRule getRule() { return rule; }
		
		//{ReUsableRef} reuseable=[ReUseAble]
		public Group getGroup() { return cGroup; }
		
		//{ReUsableRef}
		public Action getReUsableRefAction_0() { return cReUsableRefAction_0; }
		
		//reuseable=[ReUseAble]
		public Assignment getReuseableAssignment_1() { return cReuseableAssignment_1; }
		
		//[ReUseAble]
		public CrossReference getReuseableReUseAbleCrossReference_1_0() { return cReuseableReUseAbleCrossReference_1_0; }
		
		//ID
		public RuleCall getReuseableReUseAbleIDTerminalRuleCall_1_0_1() { return cReuseableReUseAbleIDTerminalRuleCall_1_0_1; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertialAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInertiaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInertiaInertiaParserRuleCall_3_0 = (RuleCall)cInertiaAssignment_3.eContents().get(0);
		private final Assignment cMassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMassMassParserRuleCall_4_0 = (RuleCall)cMassAssignment_4.eContents().get(0);
		private final Assignment cOriginAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOriginOriginParserRuleCall_5_0 = (RuleCall)cOriginAssignment_5.eContents().get(0);
		
		//Inertial:
		//	{Inertial} 'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertial} 'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//{Inertial}
		public Action getInertialAction_0() { return cInertialAction_0; }
		
		//'Inertial'
		public Keyword getInertialKeyword_1() { return cInertialKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_3() { return cInertiaAssignment_3; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_3_0() { return cInertiaInertiaParserRuleCall_3_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_4() { return cMassAssignment_4; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_4_0() { return cMassMassParserRuleCall_4_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_5() { return cOriginAssignment_5; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_5_0() { return cOriginOriginParserRuleCall_5_0; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIxxKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIxxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIxxURDFAttrSignedNumericParserRuleCall_4_0 = (RuleCall)cIxxAssignment_4.eContents().get(0);
		private final Keyword cIxyKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIxyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIxyURDFAttrSignedNumericParserRuleCall_6_0 = (RuleCall)cIxyAssignment_6.eContents().get(0);
		private final Keyword cIxzKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIxzAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIxzURDFAttrSignedNumericParserRuleCall_8_0 = (RuleCall)cIxzAssignment_8.eContents().get(0);
		private final Keyword cIyyKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cIyyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cIyyURDFAttrSignedNumericParserRuleCall_10_0 = (RuleCall)cIyyAssignment_10.eContents().get(0);
		private final Keyword cIyzKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cIyzAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cIyzURDFAttrSignedNumericParserRuleCall_12_0 = (RuleCall)cIyzAssignment_12.eContents().get(0);
		private final Keyword cIzzKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cIzzAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cIzzURDFAttrSignedNumericParserRuleCall_14_0 = (RuleCall)cIzzAssignment_14.eContents().get(0);
		
		//Inertia:
		//	{Inertia} 'Inertia' name=ID? 'ixx' ixx=URDFAttrSignedNumeric 'ixy' ixy=URDFAttrSignedNumeric 'ixz'
		//	ixz=URDFAttrSignedNumeric 'iyy' iyy=URDFAttrSignedNumeric 'iyz' iyz=URDFAttrSignedNumeric 'izz'
		//	izz=URDFAttrSignedNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertia} 'Inertia' name=ID? 'ixx' ixx=URDFAttrSignedNumeric 'ixy' ixy=URDFAttrSignedNumeric 'ixz'
		//ixz=URDFAttrSignedNumeric 'iyy' iyy=URDFAttrSignedNumeric 'iyz' iyz=URDFAttrSignedNumeric 'izz'
		//izz=URDFAttrSignedNumeric
		public Group getGroup() { return cGroup; }
		
		//{Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_1() { return cInertiaKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'ixx'
		public Keyword getIxxKeyword_3() { return cIxxKeyword_3; }
		
		//ixx=URDFAttrSignedNumeric
		public Assignment getIxxAssignment_4() { return cIxxAssignment_4; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIxxURDFAttrSignedNumericParserRuleCall_4_0() { return cIxxURDFAttrSignedNumericParserRuleCall_4_0; }
		
		//'ixy'
		public Keyword getIxyKeyword_5() { return cIxyKeyword_5; }
		
		//ixy=URDFAttrSignedNumeric
		public Assignment getIxyAssignment_6() { return cIxyAssignment_6; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIxyURDFAttrSignedNumericParserRuleCall_6_0() { return cIxyURDFAttrSignedNumericParserRuleCall_6_0; }
		
		//'ixz'
		public Keyword getIxzKeyword_7() { return cIxzKeyword_7; }
		
		//ixz=URDFAttrSignedNumeric
		public Assignment getIxzAssignment_8() { return cIxzAssignment_8; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIxzURDFAttrSignedNumericParserRuleCall_8_0() { return cIxzURDFAttrSignedNumericParserRuleCall_8_0; }
		
		//'iyy'
		public Keyword getIyyKeyword_9() { return cIyyKeyword_9; }
		
		//iyy=URDFAttrSignedNumeric
		public Assignment getIyyAssignment_10() { return cIyyAssignment_10; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIyyURDFAttrSignedNumericParserRuleCall_10_0() { return cIyyURDFAttrSignedNumericParserRuleCall_10_0; }
		
		//'iyz'
		public Keyword getIyzKeyword_11() { return cIyzKeyword_11; }
		
		//iyz=URDFAttrSignedNumeric
		public Assignment getIyzAssignment_12() { return cIyzAssignment_12; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIyzURDFAttrSignedNumericParserRuleCall_12_0() { return cIyzURDFAttrSignedNumericParserRuleCall_12_0; }
		
		//'izz'
		public Keyword getIzzKeyword_13() { return cIzzKeyword_13; }
		
		//izz=URDFAttrSignedNumeric
		public Assignment getIzzAssignment_14() { return cIzzAssignment_14; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIzzURDFAttrSignedNumericParserRuleCall_14_0() { return cIzzURDFAttrSignedNumericParserRuleCall_14_0; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVisualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVisualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		private final Assignment cOriginAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOriginOriginParserRuleCall_5_0 = (RuleCall)cOriginAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMaterialKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMaterialAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMaterialMaterialParserRuleCall_6_1_0 = (RuleCall)cMaterialAssignment_6_1.eContents().get(0);
		
		//Visual:
		//	{Visual} 'Visual' name=ID? 'Geometry' geometry=Geometry origin=Origin? ('Material' material=Material)?
		//	//problem: Kan ikke definere material uden origin pt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Visual} 'Visual' name=ID? 'Geometry' geometry=Geometry origin=Origin? ('Material' material=Material)?
		public Group getGroup() { return cGroup; }
		
		//{Visual}
		public Action getVisualAction_0() { return cVisualAction_0; }
		
		//'Visual'
		public Keyword getVisualKeyword_1() { return cVisualKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_5() { return cOriginAssignment_5; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_5_0() { return cOriginOriginParserRuleCall_5_0; }
		
		//('Material' material=Material)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'Material'
		public Keyword getMaterialKeyword_6_0() { return cMaterialKeyword_6_0; }
		
		//material=Material
		public Assignment getMaterialAssignment_6_1() { return cMaterialAssignment_6_1; }
		
		//Material
		public RuleCall getMaterialMaterialParserRuleCall_6_1_0() { return cMaterialMaterialParserRuleCall_6_1_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOriginAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOriginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXURDFAttrSignedNumericParserRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYURDFAttrSignedNumericParserRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cZKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cZAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cZURDFAttrSignedNumericParserRuleCall_8_0 = (RuleCall)cZAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRollKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cRollAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cRollURDFAttrSignedNumericParserRuleCall_9_1_0 = (RuleCall)cRollAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cPitchKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cPitchAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPitchURDFAttrSignedNumericParserRuleCall_10_1_0 = (RuleCall)cPitchAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cYawKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cYawAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cYawURDFAttrSignedNumericParserRuleCall_11_1_0 = (RuleCall)cYawAssignment_11_1.eContents().get(0);
		
		//Origin:
		//	{Origin} 'Origin' name=ID? 'x' x=URDFAttrSignedNumeric 'y' y=URDFAttrSignedNumeric 'z' z=URDFAttrSignedNumeric
		//	('roll' roll=URDFAttrSignedNumeric)? ('pitch' pitch=URDFAttrSignedNumeric)? ('yaw' yaw=URDFAttrSignedNumeric)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Origin} 'Origin' name=ID? 'x' x=URDFAttrSignedNumeric 'y' y=URDFAttrSignedNumeric 'z' z=URDFAttrSignedNumeric ('roll'
		//roll=URDFAttrSignedNumeric)? ('pitch' pitch=URDFAttrSignedNumeric)? ('yaw' yaw=URDFAttrSignedNumeric)?
		public Group getGroup() { return cGroup; }
		
		//{Origin}
		public Action getOriginAction_0() { return cOriginAction_0; }
		
		//'Origin'
		public Keyword getOriginKeyword_1() { return cOriginKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'x'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//x=URDFAttrSignedNumeric
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//URDFAttrSignedNumeric
		public RuleCall getXURDFAttrSignedNumericParserRuleCall_4_0() { return cXURDFAttrSignedNumericParserRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//y=URDFAttrSignedNumeric
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//URDFAttrSignedNumeric
		public RuleCall getYURDFAttrSignedNumericParserRuleCall_6_0() { return cYURDFAttrSignedNumericParserRuleCall_6_0; }
		
		//'z'
		public Keyword getZKeyword_7() { return cZKeyword_7; }
		
		//z=URDFAttrSignedNumeric
		public Assignment getZAssignment_8() { return cZAssignment_8; }
		
		//URDFAttrSignedNumeric
		public RuleCall getZURDFAttrSignedNumericParserRuleCall_8_0() { return cZURDFAttrSignedNumericParserRuleCall_8_0; }
		
		//('roll' roll=URDFAttrSignedNumeric)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'roll'
		public Keyword getRollKeyword_9_0() { return cRollKeyword_9_0; }
		
		//roll=URDFAttrSignedNumeric
		public Assignment getRollAssignment_9_1() { return cRollAssignment_9_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getRollURDFAttrSignedNumericParserRuleCall_9_1_0() { return cRollURDFAttrSignedNumericParserRuleCall_9_1_0; }
		
		//('pitch' pitch=URDFAttrSignedNumeric)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'pitch'
		public Keyword getPitchKeyword_10_0() { return cPitchKeyword_10_0; }
		
		//pitch=URDFAttrSignedNumeric
		public Assignment getPitchAssignment_10_1() { return cPitchAssignment_10_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getPitchURDFAttrSignedNumericParserRuleCall_10_1_0() { return cPitchURDFAttrSignedNumericParserRuleCall_10_1_0; }
		
		//('yaw' yaw=URDFAttrSignedNumeric)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'yaw'
		public Keyword getYawKeyword_11_0() { return cYawKeyword_11_0; }
		
		//yaw=URDFAttrSignedNumeric
		public Assignment getYawAssignment_11_1() { return cYawAssignment_11_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getYawURDFAttrSignedNumericParserRuleCall_11_1_0() { return cYawURDFAttrSignedNumericParserRuleCall_11_1_0; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cMassKilogramKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMassKilogramAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMassKilogramURDFAttrSignedNumericParserRuleCall_4_0 = (RuleCall)cMassKilogramAssignment_4.eContents().get(0);
		
		//Mass:
		//	{Mass} 'Mass' name=ID? 'massKilogram' massKilogram=URDFAttrSignedNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//{Mass} 'Mass' name=ID? 'massKilogram' massKilogram=URDFAttrSignedNumeric
		public Group getGroup() { return cGroup; }
		
		//{Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'Mass'
		public Keyword getMassKeyword_1() { return cMassKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'massKilogram'
		public Keyword getMassKilogramKeyword_3() { return cMassKilogramKeyword_3; }
		
		//massKilogram=URDFAttrSignedNumeric
		public Assignment getMassKilogramAssignment_4() { return cMassKilogramAssignment_4; }
		
		//URDFAttrSignedNumeric
		public RuleCall getMassKilogramURDFAttrSignedNumericParserRuleCall_4_0() { return cMassKilogramURDFAttrSignedNumericParserRuleCall_4_0; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGeometryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeometryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeometryGeometryParserRuleCall_3_0 = (RuleCall)cGeometryAssignment_3.eContents().get(0);
		private final Assignment cOriginAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOriginOriginParserRuleCall_4_0 = (RuleCall)cOriginAssignment_4.eContents().get(0);
		
		//Collision:
		//	'Collision' name=ID? 'Geometry' geometry=Geometry origin=Origin?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Collision' name=ID? 'Geometry' geometry=Geometry origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//'Collision'
		public Keyword getCollisionKeyword_0() { return cCollisionKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_2() { return cGeometryKeyword_2; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_3() { return cGeometryAssignment_3; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_3_0() { return cGeometryGeometryParserRuleCall_3_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_4() { return cOriginAssignment_4; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_4_0() { return cOriginOriginParserRuleCall_4_0; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Geometry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCylinderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeshParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSphereParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Geometry:
		//	Box | Cylinder | Mesh | Sphere;
		@Override public ParserRule getRule() { return rule; }
		
		//Box | Cylinder | Mesh | Sphere
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Box
		public RuleCall getBoxParserRuleCall_0() { return cBoxParserRuleCall_0; }
		
		//Cylinder
		public RuleCall getCylinderParserRuleCall_1() { return cCylinderParserRuleCall_1; }
		
		//Mesh
		public RuleCall getMeshParserRuleCall_2() { return cMeshParserRuleCall_2; }
		
		//Sphere
		public RuleCall getSphereParserRuleCall_3() { return cSphereParserRuleCall_3; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHeightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightURDFAttrNumericParserRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLengthURDFAttrNumericParserRuleCall_5_0 = (RuleCall)cLengthAssignment_5.eContents().get(0);
		private final Keyword cWidthKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWidthAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWidthURDFAttrNumericParserRuleCall_7_0 = (RuleCall)cWidthAssignment_7.eContents().get(0);
		
		////Tjek spec: order listing of dimensions?
		// Box:
		//	'Box' name=ID? 'height' height=URDFAttrNumeric 'length' length=URDFAttrNumeric 'width' width=URDFAttrNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//'Box' name=ID? 'height' height=URDFAttrNumeric 'length' length=URDFAttrNumeric 'width' width=URDFAttrNumeric
		public Group getGroup() { return cGroup; }
		
		//'Box'
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'height'
		public Keyword getHeightKeyword_2() { return cHeightKeyword_2; }
		
		//height=URDFAttrNumeric
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }
		
		//URDFAttrNumeric
		public RuleCall getHeightURDFAttrNumericParserRuleCall_3_0() { return cHeightURDFAttrNumericParserRuleCall_3_0; }
		
		//'length'
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }
		
		//length=URDFAttrNumeric
		public Assignment getLengthAssignment_5() { return cLengthAssignment_5; }
		
		//URDFAttrNumeric
		public RuleCall getLengthURDFAttrNumericParserRuleCall_5_0() { return cLengthURDFAttrNumericParserRuleCall_5_0; }
		
		//'width'
		public Keyword getWidthKeyword_6() { return cWidthKeyword_6; }
		
		//width=URDFAttrNumeric
		public Assignment getWidthAssignment_7() { return cWidthAssignment_7; }
		
		//URDFAttrNumeric
		public RuleCall getWidthURDFAttrNumericParserRuleCall_7_0() { return cWidthURDFAttrNumericParserRuleCall_7_0; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusURDFAttrNumericParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLengthURDFAttrNumericParserRuleCall_5_0 = (RuleCall)cLengthAssignment_5.eContents().get(0);
		
		//Cylinder:
		//	'Cylinder' name=ID? 'radius' radius=URDFAttrNumeric 'length' length=URDFAttrNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cylinder' name=ID? 'radius' radius=URDFAttrNumeric 'length' length=URDFAttrNumeric
		public Group getGroup() { return cGroup; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_0() { return cCylinderKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=URDFAttrNumeric
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//URDFAttrNumeric
		public RuleCall getRadiusURDFAttrNumericParserRuleCall_3_0() { return cRadiusURDFAttrNumericParserRuleCall_3_0; }
		
		//'length'
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }
		
		//length=URDFAttrNumeric
		public Assignment getLengthAssignment_5() { return cLengthAssignment_5; }
		
		//URDFAttrNumeric
		public RuleCall getLengthURDFAttrNumericParserRuleCall_5_0() { return cLengthURDFAttrNumericParserRuleCall_5_0; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeshKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPathToFileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathToFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathToFileURDFAttrSTRINGParserRuleCall_3_0 = (RuleCall)cPathToFileAssignment_3.eContents().get(0);
		
		////TODO: create ValueConverter to convert scale to Box
		// Mesh:
		//	'Mesh' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING //('scale' dimension=Box)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mesh' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING
		public Group getGroup() { return cGroup; }
		
		//'Mesh'
		public Keyword getMeshKeyword_0() { return cMeshKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'pathToFile'
		public Keyword getPathToFileKeyword_2() { return cPathToFileKeyword_2; }
		
		//pathToFile=URDFAttrSTRING
		public Assignment getPathToFileAssignment_3() { return cPathToFileAssignment_3; }
		
		//URDFAttrSTRING
		public RuleCall getPathToFileURDFAttrSTRINGParserRuleCall_3_0() { return cPathToFileURDFAttrSTRINGParserRuleCall_3_0; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusURDFAttrNumericParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		
		//Sphere:
		//	'Sphere' name=ID? 'radius' radius=URDFAttrNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sphere' name=ID? 'radius' radius=URDFAttrNumeric
		public Group getGroup() { return cGroup; }
		
		//'Sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=URDFAttrNumeric
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//URDFAttrNumeric
		public RuleCall getRadiusURDFAttrNumericParserRuleCall_3_0() { return cRadiusURDFAttrNumericParserRuleCall_3_0; }
	}
	public class MaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Material");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Material:
		//	Texture | Color;
		@Override public ParserRule getRule() { return rule; }
		
		//Texture | Color
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Texture
		public RuleCall getTextureParserRuleCall_0() { return cTextureParserRuleCall_0; }
		
		//Color
		public RuleCall getColorParserRuleCall_1() { return cColorParserRuleCall_1; }
	}
	public class TextureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Texture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPathToFileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathToFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathToFileURDFAttrSTRINGParserRuleCall_3_0 = (RuleCall)cPathToFileAssignment_3.eContents().get(0);
		
		//Texture:
		//	'Texture' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Texture' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING
		public Group getGroup() { return cGroup; }
		
		//'Texture'
		public Keyword getTextureKeyword_0() { return cTextureKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'pathToFile'
		public Keyword getPathToFileKeyword_2() { return cPathToFileKeyword_2; }
		
		//pathToFile=URDFAttrSTRING
		public Assignment getPathToFileAssignment_3() { return cPathToFileAssignment_3; }
		
		//URDFAttrSTRING
		public RuleCall getPathToFileURDFAttrSTRINGParserRuleCall_3_0() { return cPathToFileURDFAttrSTRINGParserRuleCall_3_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRedURDFAttrFloatParserRuleCall_3_0 = (RuleCall)cRedAssignment_3.eContents().get(0);
		private final Keyword cGreenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGreenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGreenURDFAttrFloatParserRuleCall_5_0 = (RuleCall)cGreenAssignment_5.eContents().get(0);
		private final Keyword cBlueKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlueURDFAttrFloatParserRuleCall_7_0 = (RuleCall)cBlueAssignment_7.eContents().get(0);
		private final Keyword cAlphaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAlphaAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAlphaURDFAttrFloatParserRuleCall_9_0 = (RuleCall)cAlphaAssignment_9.eContents().get(0);
		
		//// RGBA values must be floats between 0 and 1 incl 
		// Color:
		//	'Color' name=ID? 'red' red=URDFAttrFloat 'green' green=URDFAttrFloat 'blue' blue=URDFAttrFloat 'alpha'
		//	alpha=URDFAttrFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'Color' name=ID? 'red' red=URDFAttrFloat 'green' green=URDFAttrFloat 'blue' blue=URDFAttrFloat 'alpha'
		//alpha=URDFAttrFloat
		public Group getGroup() { return cGroup; }
		
		//'Color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'red'
		public Keyword getRedKeyword_2() { return cRedKeyword_2; }
		
		//red=URDFAttrFloat
		public Assignment getRedAssignment_3() { return cRedAssignment_3; }
		
		//URDFAttrFloat
		public RuleCall getRedURDFAttrFloatParserRuleCall_3_0() { return cRedURDFAttrFloatParserRuleCall_3_0; }
		
		//'green'
		public Keyword getGreenKeyword_4() { return cGreenKeyword_4; }
		
		//green=URDFAttrFloat
		public Assignment getGreenAssignment_5() { return cGreenAssignment_5; }
		
		//URDFAttrFloat
		public RuleCall getGreenURDFAttrFloatParserRuleCall_5_0() { return cGreenURDFAttrFloatParserRuleCall_5_0; }
		
		//'blue'
		public Keyword getBlueKeyword_6() { return cBlueKeyword_6; }
		
		//blue=URDFAttrFloat
		public Assignment getBlueAssignment_7() { return cBlueAssignment_7; }
		
		//URDFAttrFloat
		public RuleCall getBlueURDFAttrFloatParserRuleCall_7_0() { return cBlueURDFAttrFloatParserRuleCall_7_0; }
		
		//'alpha'
		public Keyword getAlphaKeyword_8() { return cAlphaKeyword_8; }
		
		//alpha=URDFAttrFloat
		public Assignment getAlphaAssignment_9() { return cAlphaAssignment_9; }
		
		//URDFAttrFloat
		public RuleCall getAlphaURDFAttrFloatParserRuleCall_9_0() { return cAlphaURDFAttrFloatParserRuleCall_9_0; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Keyword cDefKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Keyword cChildOfKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cChildOfAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final CrossReference cChildOfLinkCrossReference_2_0_0_2_0 = (CrossReference)cChildOfAssignment_2_0_0_2.eContents().get(0);
		private final RuleCall cChildOfLinkIDTerminalRuleCall_2_0_0_2_0_1 = (RuleCall)cChildOfLinkCrossReference_2_0_0_2_0.eContents().get(1);
		private final Keyword cParentOfKeyword_2_0_0_3 = (Keyword)cGroup_2_0_0.eContents().get(3);
		private final Assignment cParentOfAssignment_2_0_0_4 = (Assignment)cGroup_2_0_0.eContents().get(4);
		private final CrossReference cParentOfLinkCrossReference_2_0_0_4_0 = (CrossReference)cParentOfAssignment_2_0_0_4.eContents().get(0);
		private final RuleCall cParentOfLinkIDTerminalRuleCall_2_0_0_4_0_1 = (RuleCall)cParentOfLinkCrossReference_2_0_0_4_0.eContents().get(1);
		private final Keyword cTypeKeyword_2_0_0_5 = (Keyword)cGroup_2_0_0.eContents().get(5);
		private final Assignment cTypeAssignment_2_0_0_6 = (Assignment)cGroup_2_0_0.eContents().get(6);
		private final RuleCall cTypeJointTypeEnumRuleCall_2_0_0_6_0 = (RuleCall)cTypeAssignment_2_0_0_6.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final Assignment cOriginAssignment_2_0_1_0 = (Assignment)cAlternatives_2_0_1.eContents().get(0);
		private final RuleCall cOriginOriginParserRuleCall_2_0_1_0_0 = (RuleCall)cOriginAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cAxisAssignment_2_0_1_1 = (Assignment)cAlternatives_2_0_1.eContents().get(1);
		private final RuleCall cAxisAxisParserRuleCall_2_0_1_1_0 = (RuleCall)cAxisAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cLimitAssignment_2_0_1_2 = (Assignment)cAlternatives_2_0_1.eContents().get(2);
		private final RuleCall cLimitLimitParserRuleCall_2_0_1_2_0 = (RuleCall)cLimitAssignment_2_0_1_2.eContents().get(0);
		private final Assignment cCalibrationAssignment_2_0_1_3 = (Assignment)cAlternatives_2_0_1.eContents().get(3);
		private final RuleCall cCalibrationCalibrationParserRuleCall_2_0_1_3_0 = (RuleCall)cCalibrationAssignment_2_0_1_3.eContents().get(0);
		private final Assignment cDynamicsAssignment_2_0_1_4 = (Assignment)cAlternatives_2_0_1.eContents().get(4);
		private final RuleCall cDynamicsDynamicsParserRuleCall_2_0_1_4_0 = (RuleCall)cDynamicsAssignment_2_0_1_4.eContents().get(0);
		private final Assignment cSafetycontrollerAssignment_2_0_1_5 = (Assignment)cAlternatives_2_0_1.eContents().get(5);
		private final RuleCall cSafetycontrollerSafetyControllerParserRuleCall_2_0_1_5_0 = (RuleCall)cSafetycontrollerAssignment_2_0_1_5.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cReuseKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIsReuseOfAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cIsReuseOfJointCrossReference_2_1_1_0 = (CrossReference)cIsReuseOfAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIsReuseOfJointIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIsReuseOfJointCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cChildOfKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cChildOfAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final CrossReference cChildOfLinkCrossReference_2_1_3_0 = (CrossReference)cChildOfAssignment_2_1_3.eContents().get(0);
		private final RuleCall cChildOfLinkIDTerminalRuleCall_2_1_3_0_1 = (RuleCall)cChildOfLinkCrossReference_2_1_3_0.eContents().get(1);
		private final Keyword cParentOfKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cParentOfAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final CrossReference cParentOfLinkCrossReference_2_1_5_0 = (CrossReference)cParentOfAssignment_2_1_5.eContents().get(0);
		private final RuleCall cParentOfLinkIDTerminalRuleCall_2_1_5_0_1 = (RuleCall)cParentOfLinkCrossReference_2_1_5_0.eContents().get(1);
		private final Assignment cReuseAssignment_2_1_6 = (Assignment)cGroup_2_1.eContents().get(6);
		private final RuleCall cReuseReuseParserRuleCall_2_1_6_0 = (RuleCall)cReuseAssignment_2_1_6.eContents().get(0);
		
		//Joint:
		//	'Joint' name=ID (('def' 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] 'Type' type=JointType) (origin=Origin |
		//	axis=Axis | limit=Limit | calibration=Calibration | dynamics=Dynamics | safetycontroller=SafetyController)* | 'reuse'
		//	isReuseOf=[Joint] 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] reuse=Reuse?);
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint' name=ID (('def' 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] 'Type' type=JointType) (origin=Origin |
		//axis=Axis | limit=Limit | calibration=Calibration | dynamics=Dynamics | safetycontroller=SafetyController)* | 'reuse'
		//isReuseOf=[Joint] 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] reuse=Reuse?)
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(('def' 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] 'Type' type=JointType) (origin=Origin | axis=Axis |
		//limit=Limit | calibration=Calibration | dynamics=Dynamics | safetycontroller=SafetyController)* | 'reuse'
		//isReuseOf=[Joint] 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] reuse=Reuse?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('def' 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] 'Type' type=JointType) (origin=Origin | axis=Axis |
		//limit=Limit | calibration=Calibration | dynamics=Dynamics | safetycontroller=SafetyController)*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('def' 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] 'Type' type=JointType)
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'def'
		public Keyword getDefKeyword_2_0_0_0() { return cDefKeyword_2_0_0_0; }
		
		//'ChildOf'
		public Keyword getChildOfKeyword_2_0_0_1() { return cChildOfKeyword_2_0_0_1; }
		
		//childOf=[Link]
		public Assignment getChildOfAssignment_2_0_0_2() { return cChildOfAssignment_2_0_0_2; }
		
		//[Link]
		public CrossReference getChildOfLinkCrossReference_2_0_0_2_0() { return cChildOfLinkCrossReference_2_0_0_2_0; }
		
		//ID
		public RuleCall getChildOfLinkIDTerminalRuleCall_2_0_0_2_0_1() { return cChildOfLinkIDTerminalRuleCall_2_0_0_2_0_1; }
		
		//'ParentOf'
		public Keyword getParentOfKeyword_2_0_0_3() { return cParentOfKeyword_2_0_0_3; }
		
		//parentOf=[Link]
		public Assignment getParentOfAssignment_2_0_0_4() { return cParentOfAssignment_2_0_0_4; }
		
		//[Link]
		public CrossReference getParentOfLinkCrossReference_2_0_0_4_0() { return cParentOfLinkCrossReference_2_0_0_4_0; }
		
		//ID
		public RuleCall getParentOfLinkIDTerminalRuleCall_2_0_0_4_0_1() { return cParentOfLinkIDTerminalRuleCall_2_0_0_4_0_1; }
		
		//'Type'
		public Keyword getTypeKeyword_2_0_0_5() { return cTypeKeyword_2_0_0_5; }
		
		//type=JointType
		public Assignment getTypeAssignment_2_0_0_6() { return cTypeAssignment_2_0_0_6; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_2_0_0_6_0() { return cTypeJointTypeEnumRuleCall_2_0_0_6_0; }
		
		//(origin=Origin | axis=Axis | limit=Limit | calibration=Calibration | dynamics=Dynamics |
		//safetycontroller=SafetyController)*
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//origin=Origin
		public Assignment getOriginAssignment_2_0_1_0() { return cOriginAssignment_2_0_1_0; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_2_0_1_0_0() { return cOriginOriginParserRuleCall_2_0_1_0_0; }
		
		//axis=Axis
		public Assignment getAxisAssignment_2_0_1_1() { return cAxisAssignment_2_0_1_1; }
		
		//Axis
		public RuleCall getAxisAxisParserRuleCall_2_0_1_1_0() { return cAxisAxisParserRuleCall_2_0_1_1_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_2_0_1_2() { return cLimitAssignment_2_0_1_2; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_2_0_1_2_0() { return cLimitLimitParserRuleCall_2_0_1_2_0; }
		
		//calibration=Calibration
		public Assignment getCalibrationAssignment_2_0_1_3() { return cCalibrationAssignment_2_0_1_3; }
		
		//Calibration
		public RuleCall getCalibrationCalibrationParserRuleCall_2_0_1_3_0() { return cCalibrationCalibrationParserRuleCall_2_0_1_3_0; }
		
		//dynamics=Dynamics
		public Assignment getDynamicsAssignment_2_0_1_4() { return cDynamicsAssignment_2_0_1_4; }
		
		//Dynamics
		public RuleCall getDynamicsDynamicsParserRuleCall_2_0_1_4_0() { return cDynamicsDynamicsParserRuleCall_2_0_1_4_0; }
		
		//safetycontroller=SafetyController
		public Assignment getSafetycontrollerAssignment_2_0_1_5() { return cSafetycontrollerAssignment_2_0_1_5; }
		
		//SafetyController
		public RuleCall getSafetycontrollerSafetyControllerParserRuleCall_2_0_1_5_0() { return cSafetycontrollerSafetyControllerParserRuleCall_2_0_1_5_0; }
		
		////HOW TO REUSE: CHANGE PARENT AND CHILD LINKS??
		// 'reuse' isReuseOf=[Joint] 'ChildOf' childOf=[Link] 'ParentOf'
		//parentOf=[Link] reuse=Reuse?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'reuse'
		public Keyword getReuseKeyword_2_1_0() { return cReuseKeyword_2_1_0; }
		
		//isReuseOf=[Joint]
		public Assignment getIsReuseOfAssignment_2_1_1() { return cIsReuseOfAssignment_2_1_1; }
		
		//[Joint]
		public CrossReference getIsReuseOfJointCrossReference_2_1_1_0() { return cIsReuseOfJointCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getIsReuseOfJointIDTerminalRuleCall_2_1_1_0_1() { return cIsReuseOfJointIDTerminalRuleCall_2_1_1_0_1; }
		
		//'ChildOf'
		public Keyword getChildOfKeyword_2_1_2() { return cChildOfKeyword_2_1_2; }
		
		//childOf=[Link]
		public Assignment getChildOfAssignment_2_1_3() { return cChildOfAssignment_2_1_3; }
		
		//[Link]
		public CrossReference getChildOfLinkCrossReference_2_1_3_0() { return cChildOfLinkCrossReference_2_1_3_0; }
		
		//ID
		public RuleCall getChildOfLinkIDTerminalRuleCall_2_1_3_0_1() { return cChildOfLinkIDTerminalRuleCall_2_1_3_0_1; }
		
		//'ParentOf'
		public Keyword getParentOfKeyword_2_1_4() { return cParentOfKeyword_2_1_4; }
		
		//parentOf=[Link]
		public Assignment getParentOfAssignment_2_1_5() { return cParentOfAssignment_2_1_5; }
		
		//[Link]
		public CrossReference getParentOfLinkCrossReference_2_1_5_0() { return cParentOfLinkCrossReference_2_1_5_0; }
		
		//ID
		public RuleCall getParentOfLinkIDTerminalRuleCall_2_1_5_0_1() { return cParentOfLinkIDTerminalRuleCall_2_1_5_0_1; }
		
		//reuse=Reuse?
		public Assignment getReuseAssignment_2_1_6() { return cReuseAssignment_2_1_6; }
		
		//Reuse
		public RuleCall getReuseReuseParserRuleCall_2_1_6_0() { return cReuseReuseParserRuleCall_2_1_6_0; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Axis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAxisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXURDFAttrINTParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYURDFAttrINTParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cZKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZURDFAttrINTParserRuleCall_7_0 = (RuleCall)cZAssignment_7.eContents().get(0);
		
		/// * Binary values must be 0 or 1 - digitsum must be 1, WHY NEED TO DEFINE ALL THREE?? * /
		////keyword aliases: 'xyz' or 'x', 'y', 'z'
		// Axis:
		//	'Axis' name=ID? 'x' x=URDFAttrINT 'y' y=URDFAttrINT 'z' z=URDFAttrINT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Axis' name=ID? 'x' x=URDFAttrINT 'y' y=URDFAttrINT 'z' z=URDFAttrINT
		public Group getGroup() { return cGroup; }
		
		//'Axis'
		public Keyword getAxisKeyword_0() { return cAxisKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=URDFAttrINT
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//URDFAttrINT
		public RuleCall getXURDFAttrINTParserRuleCall_3_0() { return cXURDFAttrINTParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=URDFAttrINT
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//URDFAttrINT
		public RuleCall getYURDFAttrINTParserRuleCall_5_0() { return cYURDFAttrINTParserRuleCall_5_0; }
		
		//'z'
		public Keyword getZKeyword_6() { return cZKeyword_6; }
		
		//z=URDFAttrINT
		public Assignment getZAssignment_7() { return cZAssignment_7; }
		
		//URDFAttrINT
		public RuleCall getZURDFAttrINTParserRuleCall_7_0() { return cZURDFAttrINTParserRuleCall_7_0; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLimitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEffortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffortURDFAttrSignedNumericParserRuleCall_3_0 = (RuleCall)cEffortAssignment_3.eContents().get(0);
		private final Keyword cVelocityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVelocityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVelocityURDFAttrSignedNumericParserRuleCall_5_0 = (RuleCall)cVelocityAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLowerKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cLowerAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cLowerURDFAttrSignedNumericParserRuleCall_6_0_1_0 = (RuleCall)cLowerAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cUpperKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cUpperAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cUpperURDFAttrSignedNumericParserRuleCall_6_1_1_0 = (RuleCall)cUpperAssignment_6_1_1.eContents().get(0);
		
		//Limit:
		//	'Limit' name=ID? 'effort' effort=URDFAttrSignedNumeric 'velocity' velocity=URDFAttrSignedNumeric ('lower'
		//	lower=URDFAttrSignedNumeric | 'upper' upper=URDFAttrSignedNumeric)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Limit' name=ID? 'effort' effort=URDFAttrSignedNumeric 'velocity' velocity=URDFAttrSignedNumeric ('lower'
		//lower=URDFAttrSignedNumeric | 'upper' upper=URDFAttrSignedNumeric)*
		public Group getGroup() { return cGroup; }
		
		//'Limit'
		public Keyword getLimitKeyword_0() { return cLimitKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'effort'
		public Keyword getEffortKeyword_2() { return cEffortKeyword_2; }
		
		//effort=URDFAttrSignedNumeric
		public Assignment getEffortAssignment_3() { return cEffortAssignment_3; }
		
		//URDFAttrSignedNumeric
		public RuleCall getEffortURDFAttrSignedNumericParserRuleCall_3_0() { return cEffortURDFAttrSignedNumericParserRuleCall_3_0; }
		
		//'velocity'
		public Keyword getVelocityKeyword_4() { return cVelocityKeyword_4; }
		
		//velocity=URDFAttrSignedNumeric
		public Assignment getVelocityAssignment_5() { return cVelocityAssignment_5; }
		
		//URDFAttrSignedNumeric
		public RuleCall getVelocityURDFAttrSignedNumericParserRuleCall_5_0() { return cVelocityURDFAttrSignedNumericParserRuleCall_5_0; }
		
		//('lower' lower=URDFAttrSignedNumeric | 'upper' upper=URDFAttrSignedNumeric)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'lower' lower=URDFAttrSignedNumeric
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'lower'
		public Keyword getLowerKeyword_6_0_0() { return cLowerKeyword_6_0_0; }
		
		//lower=URDFAttrSignedNumeric
		public Assignment getLowerAssignment_6_0_1() { return cLowerAssignment_6_0_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getLowerURDFAttrSignedNumericParserRuleCall_6_0_1_0() { return cLowerURDFAttrSignedNumericParserRuleCall_6_0_1_0; }
		
		//'upper' upper=URDFAttrSignedNumeric
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'upper'
		public Keyword getUpperKeyword_6_1_0() { return cUpperKeyword_6_1_0; }
		
		//upper=URDFAttrSignedNumeric
		public Assignment getUpperAssignment_6_1_1() { return cUpperAssignment_6_1_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getUpperURDFAttrSignedNumericParserRuleCall_6_1_1_0() { return cUpperURDFAttrSignedNumericParserRuleCall_6_1_1_0; }
	}
	public class CalibrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Calibration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCalibrationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCalibrationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cRisingKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cRisingAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cRisingURDFAttrSignedNumericParserRuleCall_3_0_1_0 = (RuleCall)cRisingAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFallingKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFallingAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFallingURDFAttrSignedNumericParserRuleCall_3_1_1_0 = (RuleCall)cFallingAssignment_3_1_1.eContents().get(0);
		
		//Calibration:
		//	{Calibration} 'Calibration' name=ID? ('rising' rising=URDFAttrSignedNumeric | 'falling'
		//	falling=URDFAttrSignedNumeric);
		@Override public ParserRule getRule() { return rule; }
		
		//{Calibration} 'Calibration' name=ID? ('rising' rising=URDFAttrSignedNumeric | 'falling' falling=URDFAttrSignedNumeric)
		public Group getGroup() { return cGroup; }
		
		//{Calibration}
		public Action getCalibrationAction_0() { return cCalibrationAction_0; }
		
		//'Calibration'
		public Keyword getCalibrationKeyword_1() { return cCalibrationKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('rising' rising=URDFAttrSignedNumeric | 'falling' falling=URDFAttrSignedNumeric)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'rising' rising=URDFAttrSignedNumeric
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'rising'
		public Keyword getRisingKeyword_3_0_0() { return cRisingKeyword_3_0_0; }
		
		//rising=URDFAttrSignedNumeric
		public Assignment getRisingAssignment_3_0_1() { return cRisingAssignment_3_0_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getRisingURDFAttrSignedNumericParserRuleCall_3_0_1_0() { return cRisingURDFAttrSignedNumericParserRuleCall_3_0_1_0; }
		
		//'falling' falling=URDFAttrSignedNumeric
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'falling'
		public Keyword getFallingKeyword_3_1_0() { return cFallingKeyword_3_1_0; }
		
		//falling=URDFAttrSignedNumeric
		public Assignment getFallingAssignment_3_1_1() { return cFallingAssignment_3_1_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getFallingURDFAttrSignedNumericParserRuleCall_3_1_1_0() { return cFallingURDFAttrSignedNumericParserRuleCall_3_1_1_0; }
	}
	public class DynamicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Dynamics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDynamicsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDynamicsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFrictionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFrictionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFrictionURDFAttrSignedNumericParserRuleCall_3_0_1_0 = (RuleCall)cFrictionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cDampingKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDampingAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDampingURDFAttrSignedNumericParserRuleCall_3_1_1_0 = (RuleCall)cDampingAssignment_3_1_1.eContents().get(0);
		
		//Dynamics:
		//	{Dynamics} 'Dynamics' name=ID? ('friction' friction=URDFAttrSignedNumeric | 'damping'
		//	damping=URDFAttrSignedNumeric)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Dynamics} 'Dynamics' name=ID? ('friction' friction=URDFAttrSignedNumeric | 'damping' damping=URDFAttrSignedNumeric)+
		public Group getGroup() { return cGroup; }
		
		//{Dynamics}
		public Action getDynamicsAction_0() { return cDynamicsAction_0; }
		
		//'Dynamics'
		public Keyword getDynamicsKeyword_1() { return cDynamicsKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('friction' friction=URDFAttrSignedNumeric | 'damping' damping=URDFAttrSignedNumeric)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'friction' friction=URDFAttrSignedNumeric
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'friction'
		public Keyword getFrictionKeyword_3_0_0() { return cFrictionKeyword_3_0_0; }
		
		//friction=URDFAttrSignedNumeric
		public Assignment getFrictionAssignment_3_0_1() { return cFrictionAssignment_3_0_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getFrictionURDFAttrSignedNumericParserRuleCall_3_0_1_0() { return cFrictionURDFAttrSignedNumericParserRuleCall_3_0_1_0; }
		
		//'damping' damping=URDFAttrSignedNumeric
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'damping'
		public Keyword getDampingKeyword_3_1_0() { return cDampingKeyword_3_1_0; }
		
		//damping=URDFAttrSignedNumeric
		public Assignment getDampingAssignment_3_1_1() { return cDampingAssignment_3_1_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getDampingURDFAttrSignedNumericParserRuleCall_3_1_1_0() { return cDampingURDFAttrSignedNumericParserRuleCall_3_1_1_0; }
	}
	public class SafetyControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SafetyController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSafetyControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cK_velocityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cK_velocityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cK_velocityURDFAttrSignedNumericParserRuleCall_3_0 = (RuleCall)cK_velocityAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cK_positionKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cK_positionAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cK_positionURDFAttrSignedNumericParserRuleCall_4_0_1_0 = (RuleCall)cK_positionAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cSoftLowerLimitKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSoftLowerLimitAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSoftLowerLimitURDFAttrSignedNumericParserRuleCall_4_1_1_0 = (RuleCall)cSoftLowerLimitAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cSoftUpperLimitKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSoftUpperLimitAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSoftUpperLimitURDFAttrSignedNumericParserRuleCall_4_2_1_0 = (RuleCall)cSoftUpperLimitAssignment_4_2_1.eContents().get(0);
		
		//SafetyController:
		//	'SafetyController' name=ID? 'k_velocity' k_velocity=URDFAttrSignedNumeric ('k_position'
		//	k_position=URDFAttrSignedNumeric | 'softLowerLimit' softLowerLimit=URDFAttrSignedNumeric | 'softUpperLimit'
		//	softUpperLimit=URDFAttrSignedNumeric)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'SafetyController' name=ID? 'k_velocity' k_velocity=URDFAttrSignedNumeric ('k_position' k_position=URDFAttrSignedNumeric
		//| 'softLowerLimit' softLowerLimit=URDFAttrSignedNumeric | 'softUpperLimit' softUpperLimit=URDFAttrSignedNumeric)*
		public Group getGroup() { return cGroup; }
		
		//'SafetyController'
		public Keyword getSafetyControllerKeyword_0() { return cSafetyControllerKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'k_velocity'
		public Keyword getK_velocityKeyword_2() { return cK_velocityKeyword_2; }
		
		//k_velocity=URDFAttrSignedNumeric
		public Assignment getK_velocityAssignment_3() { return cK_velocityAssignment_3; }
		
		//URDFAttrSignedNumeric
		public RuleCall getK_velocityURDFAttrSignedNumericParserRuleCall_3_0() { return cK_velocityURDFAttrSignedNumericParserRuleCall_3_0; }
		
		//('k_position' k_position=URDFAttrSignedNumeric | 'softLowerLimit' softLowerLimit=URDFAttrSignedNumeric |
		//'softUpperLimit' softUpperLimit=URDFAttrSignedNumeric)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'k_position' k_position=URDFAttrSignedNumeric
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'k_position'
		public Keyword getK_positionKeyword_4_0_0() { return cK_positionKeyword_4_0_0; }
		
		//k_position=URDFAttrSignedNumeric
		public Assignment getK_positionAssignment_4_0_1() { return cK_positionAssignment_4_0_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getK_positionURDFAttrSignedNumericParserRuleCall_4_0_1_0() { return cK_positionURDFAttrSignedNumericParserRuleCall_4_0_1_0; }
		
		//'softLowerLimit' softLowerLimit=URDFAttrSignedNumeric
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'softLowerLimit'
		public Keyword getSoftLowerLimitKeyword_4_1_0() { return cSoftLowerLimitKeyword_4_1_0; }
		
		//softLowerLimit=URDFAttrSignedNumeric
		public Assignment getSoftLowerLimitAssignment_4_1_1() { return cSoftLowerLimitAssignment_4_1_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getSoftLowerLimitURDFAttrSignedNumericParserRuleCall_4_1_1_0() { return cSoftLowerLimitURDFAttrSignedNumericParserRuleCall_4_1_1_0; }
		
		//'softUpperLimit' softUpperLimit=URDFAttrSignedNumeric
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'softUpperLimit'
		public Keyword getSoftUpperLimitKeyword_4_2_0() { return cSoftUpperLimitKeyword_4_2_0; }
		
		//softUpperLimit=URDFAttrSignedNumeric
		public Assignment getSoftUpperLimitAssignment_4_2_1() { return cSoftUpperLimitAssignment_4_2_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getSoftUpperLimitURDFAttrSignedNumericParserRuleCall_4_2_1_0() { return cSoftUpperLimitURDFAttrSignedNumericParserRuleCall_4_2_1_0; }
	}
	public class URDFAttrSignedNumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.URDFAttrSignedNumeric");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSIGNED_NUMERICParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////Should we cut Mimic from the spec - NEED TO GET INTERPRETATION OF ATTRS??
		//
		/// *Mimic:
		//	'Mimic' (name=ID)?
		//	'mimics' mimics=[Joint]
		//	('multiplier' multiplier=URDFAttrSignedNumeric)?
		//	('offSet' offSet=URDFAttrSignedNumeric)?
		//;* /
		/// *Constant:
		//;* / URDFAttrSignedNumeric:
		//	value=SIGNED_NUMERIC;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SIGNED_NUMERIC
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SIGNED_NUMERIC
		public RuleCall getValueSIGNED_NUMERICParserRuleCall_0() { return cValueSIGNED_NUMERICParserRuleCall_0; }
	}
	public class URDFAttrFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.URDFAttrFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrFloat:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_0() { return cValueFLOATParserRuleCall_0; }
	}
	public class URDFAttrINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.URDFAttrINT");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrINT:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class URDFAttrNumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.URDFAttrNumeric");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMERICParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrNumeric:
		//	value=NUMERIC;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMERIC
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NUMERIC
		public RuleCall getValueNUMERICParserRuleCall_0() { return cValueNUMERICParserRuleCall_0; }
	}
	public class URDFAttrSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.URDFAttrSTRING");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrSTRING:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT ecore::EFloat:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SCIENTIFICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SCIENTIFIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SCIENTIFIC ecore::EBigDecimal:
		//	FLOAT 'e' ('+' | '-')? INT
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT 'e' ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_0() { return cFLOATParserRuleCall_0; }
		
		//'e'
		public Keyword getEKeyword_1() { return cEKeyword_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class SIGNED_NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SIGNED_NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSCIENTIFICParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//SIGNED_NUMERIC:
		//	'-'? (INT | FLOAT | SCIENTIFIC);
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? (INT | FLOAT | SCIENTIFIC)
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(INT | FLOAT | SCIENTIFIC)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1_1() { return cFLOATParserRuleCall_1_1; }
		
		//SCIENTIFIC
		public RuleCall getSCIENTIFICParserRuleCall_1_2() { return cSCIENTIFICParserRuleCall_1_2; }
	}
	public class NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.NUMERIC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSCIENTIFICParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NUMERIC:
		//	INT | FLOAT | SCIENTIFIC;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | FLOAT | SCIENTIFIC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }
		
		//SCIENTIFIC
		public RuleCall getSCIENTIFICParserRuleCall_2() { return cSCIENTIFICParserRuleCall_2; }
	}
	
	public class JointTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFixedFixedKeyword_0_0 = (Keyword)cFixedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRevoluteRevoluteKeyword_1_0 = (Keyword)cRevoluteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrismaticPrismaticKeyword_2_0 = (Keyword)cPrismaticEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cContinuousContinuousKeyword_3_0 = (Keyword)cContinuousEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JointType:
		//	fixed | revolute | prismatic | continuous;
		public EnumRule getRule() { return rule; }
		
		//fixed | revolute | prismatic | continuous
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixed
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_0() { return cFixedEnumLiteralDeclaration_0; }
		
		//'fixed'
		public Keyword getFixedFixedKeyword_0_0() { return cFixedFixedKeyword_0_0; }
		
		//revolute
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_1() { return cRevoluteEnumLiteralDeclaration_1; }
		
		//'revolute'
		public Keyword getRevoluteRevoluteKeyword_1_0() { return cRevoluteRevoluteKeyword_1_0; }
		
		//prismatic
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_2() { return cPrismaticEnumLiteralDeclaration_2; }
		
		//'prismatic'
		public Keyword getPrismaticPrismaticKeyword_2_0() { return cPrismaticPrismaticKeyword_2_0; }
		
		//continuous
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_3() { return cContinuousEnumLiteralDeclaration_3; }
		
		//'continuous'
		public Keyword getContinuousContinuousKeyword_3_0() { return cContinuousContinuousKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final TopologyElements pTopology;
	private final JointRefElements pJointRef;
	private final ReUseAbleElements pReUseAble;
	private final ReUseAbleReducedElements pReUseAbleReduced;
	private final ReUseAbleReduceElements pReUseAbleReduce;
	private final LinkElements pLink;
	private final AddToElements pAddTo;
	private final AddToLinkElements pAddToLink;
	private final AddToJointElements pAddToJoint;
	private final ReuseElements pReuse;
	private final AssignNewValueElements pAssignNewValue;
	private final DotExpressionElements pDotExpression;
	private final ReUsableRefElements pReUsableRef;
	private final InertialElements pInertial;
	private final InertiaElements pInertia;
	private final VisualElements pVisual;
	private final OriginElements pOrigin;
	private final MassElements pMass;
	private final CollisionElements pCollision;
	private final GeometryElements pGeometry;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final MeshElements pMesh;
	private final SphereElements pSphere;
	private final MaterialElements pMaterial;
	private final TextureElements pTexture;
	private final ColorElements pColor;
	private final JointElements pJoint;
	private final JointTypeElements eJointType;
	private final AxisElements pAxis;
	private final LimitElements pLimit;
	private final CalibrationElements pCalibration;
	private final DynamicsElements pDynamics;
	private final SafetyControllerElements pSafetyController;
	private final URDFAttrSignedNumericElements pURDFAttrSignedNumeric;
	private final URDFAttrFloatElements pURDFAttrFloat;
	private final URDFAttrINTElements pURDFAttrINT;
	private final URDFAttrNumericElements pURDFAttrNumeric;
	private final URDFAttrSTRINGElements pURDFAttrSTRING;
	private final FLOATElements pFLOAT;
	private final SCIENTIFICElements pSCIENTIFIC;
	private final SIGNED_NUMERICElements pSIGNED_NUMERIC;
	private final NUMERICElements pNUMERIC;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pTopology = new TopologyElements();
		this.pJointRef = new JointRefElements();
		this.pReUseAble = new ReUseAbleElements();
		this.pReUseAbleReduced = new ReUseAbleReducedElements();
		this.pReUseAbleReduce = new ReUseAbleReduceElements();
		this.pLink = new LinkElements();
		this.pAddTo = new AddToElements();
		this.pAddToLink = new AddToLinkElements();
		this.pAddToJoint = new AddToJointElements();
		this.pReuse = new ReuseElements();
		this.pAssignNewValue = new AssignNewValueElements();
		this.pDotExpression = new DotExpressionElements();
		this.pReUsableRef = new ReUsableRefElements();
		this.pInertial = new InertialElements();
		this.pInertia = new InertiaElements();
		this.pVisual = new VisualElements();
		this.pOrigin = new OriginElements();
		this.pMass = new MassElements();
		this.pCollision = new CollisionElements();
		this.pGeometry = new GeometryElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pMesh = new MeshElements();
		this.pSphere = new SphereElements();
		this.pMaterial = new MaterialElements();
		this.pTexture = new TextureElements();
		this.pColor = new ColorElements();
		this.pJoint = new JointElements();
		this.eJointType = new JointTypeElements();
		this.pAxis = new AxisElements();
		this.pLimit = new LimitElements();
		this.pCalibration = new CalibrationElements();
		this.pDynamics = new DynamicsElements();
		this.pSafetyController = new SafetyControllerElements();
		this.pURDFAttrSignedNumeric = new URDFAttrSignedNumericElements();
		this.pURDFAttrFloat = new URDFAttrFloatElements();
		this.pURDFAttrINT = new URDFAttrINTElements();
		this.pURDFAttrNumeric = new URDFAttrNumericElements();
		this.pURDFAttrSTRING = new URDFAttrSTRINGElements();
		this.pFLOAT = new FLOATElements();
		this.pSCIENTIFIC = new SCIENTIFICElements();
		this.pSIGNED_NUMERIC = new SIGNED_NUMERICElements();
		this.pNUMERIC = new NUMERICElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.urdf.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.example.org/uRDF" as uRDF
	// //generate myURDF "http://www.itu.dk/uRDF"
	//
	/// *
	// * Todo: 
	// * Expressions - inline for value assignment 
	// * Add Constant to parser rules: Should be alternative in all numeric expr - and for ID with String value  
	// * Topology of Link and Joint: How to specify?
	// * Add reflect as alternative in relevant places...
	// * Add reuse grammar with reference to reused entity (mydot example from christian not working!)
	// * Create ValueConverter (and possibly other stuff to parse reflect as negation of reused)
	// * Create ValueConverter to convert scale values to Box
	// * DONE: Create Constants datatype - signed numeric or string (incl concatenation with String)
	// * DONE: Change interface to abstract class in metamodel
	// * DONE: ReUse - add reference in the metamodel
	// * DONE: Origin required should possibly be adjusted in metamodel?
	// * DONE: Scientific notation - how to implement?
	// * DONE: Origin xyz/rpy values + axis values - vector and single defs. Kill one of the definitions?
	// * DONE: Origin values should be ('-')? INT or FLOAT or SCIENTIFIC - get SIGNED_NUMERIC class from metamodel...
	// * /
	//Robot:
	//	'Robot' name=ID ('Topology' topologies+=Topology | links+=Link | joint+=Joint | addto+=AddTo)*;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Topology:
	//	parent=[Link] (joint=JointRef child=Topology)?;
	public TopologyElements getTopologyAccess() {
		return pTopology;
	}
	
	public ParserRule getTopologyRule() {
		return getTopologyAccess().getRule();
	}
	
	//JointRef:
	//	fix='->' | rev='r->' | pris='p->' | cont='c->';
	public JointRefElements getJointRefAccess() {
		return pJointRef;
	}
	
	public ParserRule getJointRefRule() {
		return getJointRefAccess().getRule();
	}
	
	//ReUseAble:
	//	Link | Visual | Inertial | Collision;
	public ReUseAbleElements getReUseAbleAccess() {
		return pReUseAble;
	}
	
	public ParserRule getReUseAbleRule() {
		return getReUseAbleAccess().getRule();
	}
	
	//ReUseAbleReduced ReUseAble:
	//	Visual | Inertial | Collision
	public ReUseAbleReducedElements getReUseAbleReducedAccess() {
		return pReUseAbleReduced;
	}
	
	public ParserRule getReUseAbleReducedRule() {
		return getReUseAbleReducedAccess().getRule();
	}
	
	//ReUseAbleReduce ReUseAble:
	//	Origin | Axis | Limit | Calibration | Dynamics | SafetyController
	public ReUseAbleReduceElements getReUseAbleReduceAccess() {
		return pReUseAbleReduce;
	}
	
	public ParserRule getReUseAbleReduceRule() {
		return getReUseAbleReduceAccess().getRule();
	}
	
	//Link:
	//	{Link} 'Link' name=ID ('def' (inertial=Inertial | visual+=Visual | collision+=Collision)+ | 'reuse' isReuseOf=[Link]
	//	reuse=Reuse?)?;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//AddTo:
	//	AddToLink link=[Link] add=ReUseAbleReduced | AddToJoint joint=[Joint] add=ReUseAbleReduce;
	public AddToElements getAddToAccess() {
		return pAddTo;
	}
	
	public ParserRule getAddToRule() {
		return getAddToAccess().getRule();
	}
	
	//AddToLink:
	//	'Add' 'to' 'link';
	public AddToLinkElements getAddToLinkAccess() {
		return pAddToLink;
	}
	
	public ParserRule getAddToLinkRule() {
		return getAddToLinkAccess().getRule();
	}
	
	//AddToJoint:
	//	'Add' 'to' 'joint';
	public AddToJointElements getAddToJointAccess() {
		return pAddToJoint;
	}
	
	public ParserRule getAddToJointRule() {
		return getAddToJointAccess().getRule();
	}
	
	//Reuse:
	//	{Reuse} 'add' add=ReUseAbleReduced | 'edit' edit=AssignNewValue;
	public ReuseElements getReuseAccess() {
		return pReuse;
	}
	
	public ParserRule getReuseRule() {
		return getReuseAccess().getRule();
	}
	
	//AssignNewValue:
	//	{AssignNewValue} getRef=DotExpression '=' newReuseable=ReUseAble;
	public AssignNewValueElements getAssignNewValueAccess() {
		return pAssignNewValue;
	}
	
	public ParserRule getAssignNewValueRule() {
		return getAssignNewValueAccess().getRule();
	}
	
	//DotExpression Ref:
	//	ReUsableRef ({DotExpression.ref=current} "." tail=[ReUseAble])*
	public DotExpressionElements getDotExpressionAccess() {
		return pDotExpression;
	}
	
	public ParserRule getDotExpressionRule() {
		return getDotExpressionAccess().getRule();
	}
	
	//ReUsableRef Ref:
	//	{ReUsableRef} reuseable=[ReUseAble]
	public ReUsableRefElements getReUsableRefAccess() {
		return pReUsableRef;
	}
	
	public ParserRule getReUsableRefRule() {
		return getReUsableRefAccess().getRule();
	}
	
	//Inertial:
	//	{Inertial} 'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?;
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Inertia:
	//	{Inertia} 'Inertia' name=ID? 'ixx' ixx=URDFAttrSignedNumeric 'ixy' ixy=URDFAttrSignedNumeric 'ixz'
	//	ixz=URDFAttrSignedNumeric 'iyy' iyy=URDFAttrSignedNumeric 'iyz' iyz=URDFAttrSignedNumeric 'izz'
	//	izz=URDFAttrSignedNumeric;
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Visual:
	//	{Visual} 'Visual' name=ID? 'Geometry' geometry=Geometry origin=Origin? ('Material' material=Material)?
	//	//problem: Kan ikke definere material uden origin pt
	//;
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Origin:
	//	{Origin} 'Origin' name=ID? 'x' x=URDFAttrSignedNumeric 'y' y=URDFAttrSignedNumeric 'z' z=URDFAttrSignedNumeric
	//	('roll' roll=URDFAttrSignedNumeric)? ('pitch' pitch=URDFAttrSignedNumeric)? ('yaw' yaw=URDFAttrSignedNumeric)?;
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Mass:
	//	{Mass} 'Mass' name=ID? 'massKilogram' massKilogram=URDFAttrSignedNumeric;
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Collision:
	//	'Collision' name=ID? 'Geometry' geometry=Geometry origin=Origin?;
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Geometry:
	//	Box | Cylinder | Mesh | Sphere;
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	////Tjek spec: order listing of dimensions?
	// Box:
	//	'Box' name=ID? 'height' height=URDFAttrNumeric 'length' length=URDFAttrNumeric 'width' width=URDFAttrNumeric;
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder:
	//	'Cylinder' name=ID? 'radius' radius=URDFAttrNumeric 'length' length=URDFAttrNumeric;
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	////TODO: create ValueConverter to convert scale to Box
	// Mesh:
	//	'Mesh' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING //('scale' dimension=Box)?
	//;
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//Sphere:
	//	'Sphere' name=ID? 'radius' radius=URDFAttrNumeric;
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//Material:
	//	Texture | Color;
	public MaterialElements getMaterialAccess() {
		return pMaterial;
	}
	
	public ParserRule getMaterialRule() {
		return getMaterialAccess().getRule();
	}
	
	//Texture:
	//	'Texture' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING;
	public TextureElements getTextureAccess() {
		return pTexture;
	}
	
	public ParserRule getTextureRule() {
		return getTextureAccess().getRule();
	}
	
	//// RGBA values must be floats between 0 and 1 incl 
	// Color:
	//	'Color' name=ID? 'red' red=URDFAttrFloat 'green' green=URDFAttrFloat 'blue' blue=URDFAttrFloat 'alpha'
	//	alpha=URDFAttrFloat;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Joint:
	//	'Joint' name=ID (('def' 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] 'Type' type=JointType) (origin=Origin |
	//	axis=Axis | limit=Limit | calibration=Calibration | dynamics=Dynamics | safetycontroller=SafetyController)* | 'reuse'
	//	isReuseOf=[Joint] 'ChildOf' childOf=[Link] 'ParentOf' parentOf=[Link] reuse=Reuse?);
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//enum JointType:
	//	fixed | revolute | prismatic | continuous;
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	/// * Binary values must be 0 or 1 - digitsum must be 1, WHY NEED TO DEFINE ALL THREE?? * /
	////keyword aliases: 'xyz' or 'x', 'y', 'z'
	// Axis:
	//	'Axis' name=ID? 'x' x=URDFAttrINT 'y' y=URDFAttrINT 'z' z=URDFAttrINT;
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//Limit:
	//	'Limit' name=ID? 'effort' effort=URDFAttrSignedNumeric 'velocity' velocity=URDFAttrSignedNumeric ('lower'
	//	lower=URDFAttrSignedNumeric | 'upper' upper=URDFAttrSignedNumeric)*;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Calibration:
	//	{Calibration} 'Calibration' name=ID? ('rising' rising=URDFAttrSignedNumeric | 'falling'
	//	falling=URDFAttrSignedNumeric);
	public CalibrationElements getCalibrationAccess() {
		return pCalibration;
	}
	
	public ParserRule getCalibrationRule() {
		return getCalibrationAccess().getRule();
	}
	
	//Dynamics:
	//	{Dynamics} 'Dynamics' name=ID? ('friction' friction=URDFAttrSignedNumeric | 'damping'
	//	damping=URDFAttrSignedNumeric)+;
	public DynamicsElements getDynamicsAccess() {
		return pDynamics;
	}
	
	public ParserRule getDynamicsRule() {
		return getDynamicsAccess().getRule();
	}
	
	//SafetyController:
	//	'SafetyController' name=ID? 'k_velocity' k_velocity=URDFAttrSignedNumeric ('k_position'
	//	k_position=URDFAttrSignedNumeric | 'softLowerLimit' softLowerLimit=URDFAttrSignedNumeric | 'softUpperLimit'
	//	softUpperLimit=URDFAttrSignedNumeric)*;
	public SafetyControllerElements getSafetyControllerAccess() {
		return pSafetyController;
	}
	
	public ParserRule getSafetyControllerRule() {
		return getSafetyControllerAccess().getRule();
	}
	
	////Should we cut Mimic from the spec - NEED TO GET INTERPRETATION OF ATTRS??
	//
	/// *Mimic:
	//	'Mimic' (name=ID)?
	//	'mimics' mimics=[Joint]
	//	('multiplier' multiplier=URDFAttrSignedNumeric)?
	//	('offSet' offSet=URDFAttrSignedNumeric)?
	//;* /
	/// *Constant:
	//;* / URDFAttrSignedNumeric:
	//	value=SIGNED_NUMERIC;
	public URDFAttrSignedNumericElements getURDFAttrSignedNumericAccess() {
		return pURDFAttrSignedNumeric;
	}
	
	public ParserRule getURDFAttrSignedNumericRule() {
		return getURDFAttrSignedNumericAccess().getRule();
	}
	
	//URDFAttrFloat:
	//	value=FLOAT;
	public URDFAttrFloatElements getURDFAttrFloatAccess() {
		return pURDFAttrFloat;
	}
	
	public ParserRule getURDFAttrFloatRule() {
		return getURDFAttrFloatAccess().getRule();
	}
	
	//URDFAttrINT:
	//	value=INT;
	public URDFAttrINTElements getURDFAttrINTAccess() {
		return pURDFAttrINT;
	}
	
	public ParserRule getURDFAttrINTRule() {
		return getURDFAttrINTAccess().getRule();
	}
	
	//URDFAttrNumeric:
	//	value=NUMERIC;
	public URDFAttrNumericElements getURDFAttrNumericAccess() {
		return pURDFAttrNumeric;
	}
	
	public ParserRule getURDFAttrNumericRule() {
		return getURDFAttrNumericAccess().getRule();
	}
	
	//URDFAttrSTRING:
	//	value=STRING;
	public URDFAttrSTRINGElements getURDFAttrSTRINGAccess() {
		return pURDFAttrSTRING;
	}
	
	public ParserRule getURDFAttrSTRINGRule() {
		return getURDFAttrSTRINGAccess().getRule();
	}
	
	//FLOAT ecore::EFloat:
	//	INT '.' INT
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//SCIENTIFIC ecore::EBigDecimal:
	//	FLOAT 'e' ('+' | '-')? INT
	public SCIENTIFICElements getSCIENTIFICAccess() {
		return pSCIENTIFIC;
	}
	
	public ParserRule getSCIENTIFICRule() {
		return getSCIENTIFICAccess().getRule();
	}
	
	//SIGNED_NUMERIC:
	//	'-'? (INT | FLOAT | SCIENTIFIC);
	public SIGNED_NUMERICElements getSIGNED_NUMERICAccess() {
		return pSIGNED_NUMERIC;
	}
	
	public ParserRule getSIGNED_NUMERICRule() {
		return getSIGNED_NUMERICAccess().getRule();
	}
	
	//NUMERIC:
	//	INT | FLOAT | SCIENTIFIC;
	public NUMERICElements getNUMERICAccess() {
		return pNUMERIC;
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
