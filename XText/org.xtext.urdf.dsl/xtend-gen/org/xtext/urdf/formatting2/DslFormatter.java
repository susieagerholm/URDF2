/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.formatting2;

import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.urdf.myURDF.Axis;
import org.xtext.urdf.myURDF.Geometry;
import org.xtext.urdf.myURDF.Joint;
import org.xtext.urdf.myURDF.Limit;
import org.xtext.urdf.myURDF.Link;
import org.xtext.urdf.myURDF.Origin;
import org.xtext.urdf.myURDF.Robot;
import org.xtext.urdf.myURDF.Visual;

@SuppressWarnings("all")
public class DslFormatter extends AbstractFormatter2 {
  protected void _format(final Robot robot, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Robot>interior(robot, _function);
    EList<Link> _link = robot.getLink();
    for (final Link link : _link) {
      Link _format = document.<Link>format(link);
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(1, 1, 2);
        it.noSpace();
      };
      document.<Link>prepend(_format, _function_1);
    }
    EList<Joint> _joint = robot.getJoint();
    for (final Joint joint : _joint) {
      Joint _format_1 = document.<Joint>format(joint);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(1, 1, 2);
        it.noSpace();
      };
      document.<Joint>prepend(_format_1, _function_2);
    }
  }
  
  protected void _format(final Link link, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Link>interior(link, _function);
  }
  
  protected void _format(final Joint joint, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Joint>interior(joint, _function);
    Link _childOf = joint.getChildOf();
    Link _format = document.<Link>format(_childOf);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
      it.noSpace();
    };
    document.<Link>prepend(_format, _function_1);
    Link _parentOf = joint.getParentOf();
    Link _format_1 = document.<Link>format(_parentOf);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
      it.noSpace();
    };
    document.<Link>prepend(_format_1, _function_2);
  }
  
  protected void _format(final Limit limit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Limit>interior(limit, _function);
  }
  
  protected void _format(final Axis axis, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Axis>interior(axis, _function);
  }
  
  protected void _format(final Visual visual, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Visual>interior(visual, _function);
    Origin _origin = visual.getOrigin();
    Origin _format = document.<Origin>format(_origin);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
      it.noSpace();
    };
    document.<Origin>prepend(_format, _function_1);
  }
  
  protected void _format(final Geometry geo, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Geometry>interior(geo, _function);
  }
  
  public void format(final Object axis, final IFormattableDocument document) {
    if (axis instanceof XtextResource) {
      _format((XtextResource)axis, document);
      return;
    } else if (axis instanceof Axis) {
      _format((Axis)axis, document);
      return;
    } else if (axis instanceof Joint) {
      _format((Joint)axis, document);
      return;
    } else if (axis instanceof Limit) {
      _format((Limit)axis, document);
      return;
    } else if (axis instanceof Link) {
      _format((Link)axis, document);
      return;
    } else if (axis instanceof Robot) {
      _format((Robot)axis, document);
      return;
    } else if (axis instanceof Visual) {
      _format((Visual)axis, document);
      return;
    } else if (axis instanceof Geometry) {
      _format((Geometry)axis, document);
      return;
    } else if (axis instanceof EObject) {
      _format((EObject)axis, document);
      return;
    } else if (axis == null) {
      _format((Void)null, document);
      return;
    } else if (axis != null) {
      _format(axis, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(axis, document).toString());
    }
  }
}
