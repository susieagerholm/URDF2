/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.myURDF.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.urdf.myURDF.Axis;
import org.xtext.urdf.myURDF.Calibration;
import org.xtext.urdf.myURDF.Dynamics;
import org.xtext.urdf.myURDF.JointDecorator;
import org.xtext.urdf.myURDF.Limit;
import org.xtext.urdf.myURDF.MyURDFPackage;
import org.xtext.urdf.myURDF.SafetyController;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Joint Decorator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.urdf.myURDF.impl.JointDecoratorImpl#getAxis <em>Axis</em>}</li>
 *   <li>{@link org.xtext.urdf.myURDF.impl.JointDecoratorImpl#getLimit <em>Limit</em>}</li>
 *   <li>{@link org.xtext.urdf.myURDF.impl.JointDecoratorImpl#getCalibration <em>Calibration</em>}</li>
 *   <li>{@link org.xtext.urdf.myURDF.impl.JointDecoratorImpl#getDynamics <em>Dynamics</em>}</li>
 *   <li>{@link org.xtext.urdf.myURDF.impl.JointDecoratorImpl#getSafetycontroller <em>Safetycontroller</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JointDecoratorImpl extends MinimalEObjectImpl.Container implements JointDecorator {
	/**
	 * The cached value of the '{@link #getAxis() <em>Axis</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAxis()
	 * @generated
	 * @ordered
	 */
	protected Axis axis;

	/**
	 * The cached value of the '{@link #getLimit() <em>Limit</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLimit()
	 * @generated
	 * @ordered
	 */
	protected Limit limit;

	/**
	 * The cached value of the '{@link #getCalibration() <em>Calibration</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCalibration()
	 * @generated
	 * @ordered
	 */
	protected Calibration calibration;

	/**
	 * The cached value of the '{@link #getDynamics() <em>Dynamics</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDynamics()
	 * @generated
	 * @ordered
	 */
	protected Dynamics dynamics;

	/**
	 * The cached value of the '{@link #getSafetycontroller() <em>Safetycontroller</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSafetycontroller()
	 * @generated
	 * @ordered
	 */
	protected SafetyController safetycontroller;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JointDecoratorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MyURDFPackage.Literals.JOINT_DECORATOR;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Axis getAxis() {
		return axis;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetAxis(Axis newAxis, NotificationChain msgs) {
		Axis oldAxis = axis;
		axis = newAxis;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__AXIS, oldAxis, newAxis);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAxis(Axis newAxis) {
		if (newAxis != axis) {
			NotificationChain msgs = null;
			if (axis != null)
				msgs = ((InternalEObject)axis).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__AXIS, null, msgs);
			if (newAxis != null)
				msgs = ((InternalEObject)newAxis).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__AXIS, null, msgs);
			msgs = basicSetAxis(newAxis, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__AXIS, newAxis, newAxis));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Limit getLimit() {
		return limit;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetLimit(Limit newLimit, NotificationChain msgs) {
		Limit oldLimit = limit;
		limit = newLimit;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__LIMIT, oldLimit, newLimit);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLimit(Limit newLimit) {
		if (newLimit != limit) {
			NotificationChain msgs = null;
			if (limit != null)
				msgs = ((InternalEObject)limit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__LIMIT, null, msgs);
			if (newLimit != null)
				msgs = ((InternalEObject)newLimit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__LIMIT, null, msgs);
			msgs = basicSetLimit(newLimit, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__LIMIT, newLimit, newLimit));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Calibration getCalibration() {
		return calibration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetCalibration(Calibration newCalibration, NotificationChain msgs) {
		Calibration oldCalibration = calibration;
		calibration = newCalibration;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__CALIBRATION, oldCalibration, newCalibration);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setCalibration(Calibration newCalibration) {
		if (newCalibration != calibration) {
			NotificationChain msgs = null;
			if (calibration != null)
				msgs = ((InternalEObject)calibration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__CALIBRATION, null, msgs);
			if (newCalibration != null)
				msgs = ((InternalEObject)newCalibration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__CALIBRATION, null, msgs);
			msgs = basicSetCalibration(newCalibration, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__CALIBRATION, newCalibration, newCalibration));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Dynamics getDynamics() {
		return dynamics;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetDynamics(Dynamics newDynamics, NotificationChain msgs) {
		Dynamics oldDynamics = dynamics;
		dynamics = newDynamics;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__DYNAMICS, oldDynamics, newDynamics);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDynamics(Dynamics newDynamics) {
		if (newDynamics != dynamics) {
			NotificationChain msgs = null;
			if (dynamics != null)
				msgs = ((InternalEObject)dynamics).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__DYNAMICS, null, msgs);
			if (newDynamics != null)
				msgs = ((InternalEObject)newDynamics).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__DYNAMICS, null, msgs);
			msgs = basicSetDynamics(newDynamics, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__DYNAMICS, newDynamics, newDynamics));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SafetyController getSafetycontroller() {
		return safetycontroller;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetSafetycontroller(SafetyController newSafetycontroller, NotificationChain msgs) {
		SafetyController oldSafetycontroller = safetycontroller;
		safetycontroller = newSafetycontroller;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER, oldSafetycontroller, newSafetycontroller);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSafetycontroller(SafetyController newSafetycontroller) {
		if (newSafetycontroller != safetycontroller) {
			NotificationChain msgs = null;
			if (safetycontroller != null)
				msgs = ((InternalEObject)safetycontroller).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER, null, msgs);
			if (newSafetycontroller != null)
				msgs = ((InternalEObject)newSafetycontroller).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER, null, msgs);
			msgs = basicSetSafetycontroller(newSafetycontroller, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER, newSafetycontroller, newSafetycontroller));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MyURDFPackage.JOINT_DECORATOR__AXIS:
				return basicSetAxis(null, msgs);
			case MyURDFPackage.JOINT_DECORATOR__LIMIT:
				return basicSetLimit(null, msgs);
			case MyURDFPackage.JOINT_DECORATOR__CALIBRATION:
				return basicSetCalibration(null, msgs);
			case MyURDFPackage.JOINT_DECORATOR__DYNAMICS:
				return basicSetDynamics(null, msgs);
			case MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER:
				return basicSetSafetycontroller(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MyURDFPackage.JOINT_DECORATOR__AXIS:
				return getAxis();
			case MyURDFPackage.JOINT_DECORATOR__LIMIT:
				return getLimit();
			case MyURDFPackage.JOINT_DECORATOR__CALIBRATION:
				return getCalibration();
			case MyURDFPackage.JOINT_DECORATOR__DYNAMICS:
				return getDynamics();
			case MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER:
				return getSafetycontroller();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MyURDFPackage.JOINT_DECORATOR__AXIS:
				setAxis((Axis)newValue);
				return;
			case MyURDFPackage.JOINT_DECORATOR__LIMIT:
				setLimit((Limit)newValue);
				return;
			case MyURDFPackage.JOINT_DECORATOR__CALIBRATION:
				setCalibration((Calibration)newValue);
				return;
			case MyURDFPackage.JOINT_DECORATOR__DYNAMICS:
				setDynamics((Dynamics)newValue);
				return;
			case MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER:
				setSafetycontroller((SafetyController)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MyURDFPackage.JOINT_DECORATOR__AXIS:
				setAxis((Axis)null);
				return;
			case MyURDFPackage.JOINT_DECORATOR__LIMIT:
				setLimit((Limit)null);
				return;
			case MyURDFPackage.JOINT_DECORATOR__CALIBRATION:
				setCalibration((Calibration)null);
				return;
			case MyURDFPackage.JOINT_DECORATOR__DYNAMICS:
				setDynamics((Dynamics)null);
				return;
			case MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER:
				setSafetycontroller((SafetyController)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MyURDFPackage.JOINT_DECORATOR__AXIS:
				return axis != null;
			case MyURDFPackage.JOINT_DECORATOR__LIMIT:
				return limit != null;
			case MyURDFPackage.JOINT_DECORATOR__CALIBRATION:
				return calibration != null;
			case MyURDFPackage.JOINT_DECORATOR__DYNAMICS:
				return dynamics != null;
			case MyURDFPackage.JOINT_DECORATOR__SAFETYCONTROLLER:
				return safetycontroller != null;
		}
		return super.eIsSet(featureID);
	}

} //JointDecoratorImpl
