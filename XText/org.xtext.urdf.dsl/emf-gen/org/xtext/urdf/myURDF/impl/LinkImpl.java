/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.myURDF.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.urdf.myURDF.Collision;
import org.xtext.urdf.myURDF.Inertial;
import org.xtext.urdf.myURDF.Link;
import org.xtext.urdf.myURDF.LinkDecorator;
import org.xtext.urdf.myURDF.MyURDFPackage;
import org.xtext.urdf.myURDF.ReUseAble;
import org.xtext.urdf.myURDF.Visual;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.urdf.myURDF.impl.LinkImpl#getIsReuseOf <em>Is Reuse Of</em>}</li>
 *   <li>{@link org.xtext.urdf.myURDF.impl.LinkImpl#getDecorator <em>Decorator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LinkImpl extends NamedElementImpl implements Link {
	/**
	 * The cached value of the '{@link #getIsReuseOf() <em>Is Reuse Of</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIsReuseOf()
	 * @generated
	 * @ordered
	 */
	protected ReUseAble isReuseOf;

	/**
	 * The cached value of the '{@link #getDecorator() <em>Decorator</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDecorator()
	 * @generated
	 * @ordered
	 */
	protected LinkDecorator decorator;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MyURDFPackage.Literals.LINK;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReUseAble getIsReuseOf() {
		if (isReuseOf != null && isReuseOf.eIsProxy()) {
			InternalEObject oldIsReuseOf = (InternalEObject)isReuseOf;
			isReuseOf = (ReUseAble)eResolveProxy(oldIsReuseOf);
			if (isReuseOf != oldIsReuseOf) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyURDFPackage.LINK__IS_REUSE_OF, oldIsReuseOf, isReuseOf));
			}
		}
		return isReuseOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReUseAble basicGetIsReuseOf() {
		return isReuseOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIsReuseOf(ReUseAble newIsReuseOf) {
		ReUseAble oldIsReuseOf = isReuseOf;
		isReuseOf = newIsReuseOf;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.LINK__IS_REUSE_OF, oldIsReuseOf, isReuseOf));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LinkDecorator getDecorator() {
		return decorator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetDecorator(LinkDecorator newDecorator, NotificationChain msgs) {
		LinkDecorator oldDecorator = decorator;
		decorator = newDecorator;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyURDFPackage.LINK__DECORATOR, oldDecorator, newDecorator);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDecorator(LinkDecorator newDecorator) {
		if (newDecorator != decorator) {
			NotificationChain msgs = null;
			if (decorator != null)
				msgs = ((InternalEObject)decorator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.LINK__DECORATOR, null, msgs);
			if (newDecorator != null)
				msgs = ((InternalEObject)newDecorator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyURDFPackage.LINK__DECORATOR, null, msgs);
			msgs = basicSetDecorator(newDecorator, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyURDFPackage.LINK__DECORATOR, newDecorator, newDecorator));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MyURDFPackage.LINK__DECORATOR:
				return basicSetDecorator(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MyURDFPackage.LINK__IS_REUSE_OF:
				if (resolve) return getIsReuseOf();
				return basicGetIsReuseOf();
			case MyURDFPackage.LINK__DECORATOR:
				return getDecorator();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MyURDFPackage.LINK__IS_REUSE_OF:
				setIsReuseOf((ReUseAble)newValue);
				return;
			case MyURDFPackage.LINK__DECORATOR:
				setDecorator((LinkDecorator)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MyURDFPackage.LINK__IS_REUSE_OF:
				setIsReuseOf((ReUseAble)null);
				return;
			case MyURDFPackage.LINK__DECORATOR:
				setDecorator((LinkDecorator)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MyURDFPackage.LINK__IS_REUSE_OF:
				return isReuseOf != null;
			case MyURDFPackage.LINK__DECORATOR:
				return decorator != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
		if (baseClass == ReUseAble.class) {
			switch (derivedFeatureID) {
				case MyURDFPackage.LINK__IS_REUSE_OF: return MyURDFPackage.RE_USE_ABLE__IS_REUSE_OF;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
		if (baseClass == ReUseAble.class) {
			switch (baseFeatureID) {
				case MyURDFPackage.RE_USE_ABLE__IS_REUSE_OF: return MyURDFPackage.LINK__IS_REUSE_OF;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

} //LinkImpl
