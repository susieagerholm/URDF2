/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.urdf.ide.contentassist.antlr.internal.InternalDslParser;
import org.xtext.urdf.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Inject
	private DslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRobotAccess().getAlternatives_2(), "rule__Robot__Alternatives_2");
					put(grammarAccess.getJointRefAccess().getAlternatives(), "rule__JointRef__Alternatives");
					put(grammarAccess.getReUseAbleAccess().getAlternatives(), "rule__ReUseAble__Alternatives");
					put(grammarAccess.getReUseAbleReducedAccess().getAlternatives(), "rule__ReUseAbleReduced__Alternatives");
					put(grammarAccess.getReUseAbleReduceAccess().getAlternatives(), "rule__ReUseAbleReduce__Alternatives");
					put(grammarAccess.getLinkAccess().getAlternatives_3(), "rule__Link__Alternatives_3");
					put(grammarAccess.getLinkAccess().getAlternatives_3_0_1(), "rule__Link__Alternatives_3_0_1");
					put(grammarAccess.getAddToAccess().getAlternatives(), "rule__AddTo__Alternatives");
					put(grammarAccess.getReuseAccess().getAlternatives(), "rule__Reuse__Alternatives");
					put(grammarAccess.getGeometryAccess().getAlternatives(), "rule__Geometry__Alternatives");
					put(grammarAccess.getMaterialAccess().getAlternatives(), "rule__Material__Alternatives");
					put(grammarAccess.getJointAccess().getAlternatives_2(), "rule__Joint__Alternatives_2");
					put(grammarAccess.getJointAccess().getAlternatives_2_0_1(), "rule__Joint__Alternatives_2_0_1");
					put(grammarAccess.getLimitAccess().getAlternatives_6(), "rule__Limit__Alternatives_6");
					put(grammarAccess.getCalibrationAccess().getAlternatives_3(), "rule__Calibration__Alternatives_3");
					put(grammarAccess.getDynamicsAccess().getAlternatives_3(), "rule__Dynamics__Alternatives_3");
					put(grammarAccess.getSafetyControllerAccess().getAlternatives_4(), "rule__SafetyController__Alternatives_4");
					put(grammarAccess.getSCIENTIFICAccess().getAlternatives_2(), "rule__SCIENTIFIC__Alternatives_2");
					put(grammarAccess.getSIGNED_NUMERICAccess().getAlternatives_1(), "rule__SIGNED_NUMERIC__Alternatives_1");
					put(grammarAccess.getNUMERICAccess().getAlternatives(), "rule__NUMERIC__Alternatives");
					put(grammarAccess.getJointTypeAccess().getAlternatives(), "rule__JointType__Alternatives");
					put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
					put(grammarAccess.getRobotAccess().getGroup_2_0(), "rule__Robot__Group_2_0__0");
					put(grammarAccess.getTopologyAccess().getGroup(), "rule__Topology__Group__0");
					put(grammarAccess.getTopologyAccess().getGroup_1(), "rule__Topology__Group_1__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getLinkAccess().getGroup_3_0(), "rule__Link__Group_3_0__0");
					put(grammarAccess.getLinkAccess().getGroup_3_1(), "rule__Link__Group_3_1__0");
					put(grammarAccess.getAddToAccess().getGroup_0(), "rule__AddTo__Group_0__0");
					put(grammarAccess.getAddToAccess().getGroup_1(), "rule__AddTo__Group_1__0");
					put(grammarAccess.getAddToLinkAccess().getGroup(), "rule__AddToLink__Group__0");
					put(grammarAccess.getAddToJointAccess().getGroup(), "rule__AddToJoint__Group__0");
					put(grammarAccess.getReuseAccess().getGroup_0(), "rule__Reuse__Group_0__0");
					put(grammarAccess.getReuseAccess().getGroup_1(), "rule__Reuse__Group_1__0");
					put(grammarAccess.getAssignNewValueAccess().getGroup(), "rule__AssignNewValue__Group__0");
					put(grammarAccess.getDotExpressionAccess().getGroup(), "rule__DotExpression__Group__0");
					put(grammarAccess.getDotExpressionAccess().getGroup_1(), "rule__DotExpression__Group_1__0");
					put(grammarAccess.getReUsableRefAccess().getGroup(), "rule__ReUsableRef__Group__0");
					put(grammarAccess.getInertialAccess().getGroup(), "rule__Inertial__Group__0");
					put(grammarAccess.getInertiaAccess().getGroup(), "rule__Inertia__Group__0");
					put(grammarAccess.getVisualAccess().getGroup(), "rule__Visual__Group__0");
					put(grammarAccess.getVisualAccess().getGroup_6(), "rule__Visual__Group_6__0");
					put(grammarAccess.getOriginAccess().getGroup(), "rule__Origin__Group__0");
					put(grammarAccess.getOriginAccess().getGroup_9(), "rule__Origin__Group_9__0");
					put(grammarAccess.getOriginAccess().getGroup_10(), "rule__Origin__Group_10__0");
					put(grammarAccess.getOriginAccess().getGroup_11(), "rule__Origin__Group_11__0");
					put(grammarAccess.getMassAccess().getGroup(), "rule__Mass__Group__0");
					put(grammarAccess.getCollisionAccess().getGroup(), "rule__Collision__Group__0");
					put(grammarAccess.getBoxAccess().getGroup(), "rule__Box__Group__0");
					put(grammarAccess.getCylinderAccess().getGroup(), "rule__Cylinder__Group__0");
					put(grammarAccess.getMeshAccess().getGroup(), "rule__Mesh__Group__0");
					put(grammarAccess.getSphereAccess().getGroup(), "rule__Sphere__Group__0");
					put(grammarAccess.getTextureAccess().getGroup(), "rule__Texture__Group__0");
					put(grammarAccess.getColorAccess().getGroup(), "rule__Color__Group__0");
					put(grammarAccess.getJointAccess().getGroup(), "rule__Joint__Group__0");
					put(grammarAccess.getJointAccess().getGroup_2_0(), "rule__Joint__Group_2_0__0");
					put(grammarAccess.getJointAccess().getGroup_2_0_0(), "rule__Joint__Group_2_0_0__0");
					put(grammarAccess.getJointAccess().getGroup_2_1(), "rule__Joint__Group_2_1__0");
					put(grammarAccess.getAxisAccess().getGroup(), "rule__Axis__Group__0");
					put(grammarAccess.getLimitAccess().getGroup(), "rule__Limit__Group__0");
					put(grammarAccess.getLimitAccess().getGroup_6_0(), "rule__Limit__Group_6_0__0");
					put(grammarAccess.getLimitAccess().getGroup_6_1(), "rule__Limit__Group_6_1__0");
					put(grammarAccess.getCalibrationAccess().getGroup(), "rule__Calibration__Group__0");
					put(grammarAccess.getCalibrationAccess().getGroup_3_0(), "rule__Calibration__Group_3_0__0");
					put(grammarAccess.getCalibrationAccess().getGroup_3_1(), "rule__Calibration__Group_3_1__0");
					put(grammarAccess.getDynamicsAccess().getGroup(), "rule__Dynamics__Group__0");
					put(grammarAccess.getDynamicsAccess().getGroup_3_0(), "rule__Dynamics__Group_3_0__0");
					put(grammarAccess.getDynamicsAccess().getGroup_3_1(), "rule__Dynamics__Group_3_1__0");
					put(grammarAccess.getSafetyControllerAccess().getGroup(), "rule__SafetyController__Group__0");
					put(grammarAccess.getSafetyControllerAccess().getGroup_4_0(), "rule__SafetyController__Group_4_0__0");
					put(grammarAccess.getSafetyControllerAccess().getGroup_4_1(), "rule__SafetyController__Group_4_1__0");
					put(grammarAccess.getSafetyControllerAccess().getGroup_4_2(), "rule__SafetyController__Group_4_2__0");
					put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
					put(grammarAccess.getSCIENTIFICAccess().getGroup(), "rule__SCIENTIFIC__Group__0");
					put(grammarAccess.getSIGNED_NUMERICAccess().getGroup(), "rule__SIGNED_NUMERIC__Group__0");
					put(grammarAccess.getRobotAccess().getNameAssignment_1(), "rule__Robot__NameAssignment_1");
					put(grammarAccess.getRobotAccess().getTopologiesAssignment_2_0_1(), "rule__Robot__TopologiesAssignment_2_0_1");
					put(grammarAccess.getRobotAccess().getLinksAssignment_2_1(), "rule__Robot__LinksAssignment_2_1");
					put(grammarAccess.getRobotAccess().getJointAssignment_2_2(), "rule__Robot__JointAssignment_2_2");
					put(grammarAccess.getRobotAccess().getAddtoAssignment_2_3(), "rule__Robot__AddtoAssignment_2_3");
					put(grammarAccess.getTopologyAccess().getParentAssignment_0(), "rule__Topology__ParentAssignment_0");
					put(grammarAccess.getTopologyAccess().getJointAssignment_1_0(), "rule__Topology__JointAssignment_1_0");
					put(grammarAccess.getTopologyAccess().getChildAssignment_1_1(), "rule__Topology__ChildAssignment_1_1");
					put(grammarAccess.getJointRefAccess().getFixAssignment_0(), "rule__JointRef__FixAssignment_0");
					put(grammarAccess.getJointRefAccess().getRevAssignment_1(), "rule__JointRef__RevAssignment_1");
					put(grammarAccess.getJointRefAccess().getPrisAssignment_2(), "rule__JointRef__PrisAssignment_2");
					put(grammarAccess.getJointRefAccess().getContAssignment_3(), "rule__JointRef__ContAssignment_3");
					put(grammarAccess.getLinkAccess().getNameAssignment_2(), "rule__Link__NameAssignment_2");
					put(grammarAccess.getLinkAccess().getInertialAssignment_3_0_1_0(), "rule__Link__InertialAssignment_3_0_1_0");
					put(grammarAccess.getLinkAccess().getVisualAssignment_3_0_1_1(), "rule__Link__VisualAssignment_3_0_1_1");
					put(grammarAccess.getLinkAccess().getCollisionAssignment_3_0_1_2(), "rule__Link__CollisionAssignment_3_0_1_2");
					put(grammarAccess.getLinkAccess().getIsReuseOfAssignment_3_1_1(), "rule__Link__IsReuseOfAssignment_3_1_1");
					put(grammarAccess.getLinkAccess().getReuseAssignment_3_1_2(), "rule__Link__ReuseAssignment_3_1_2");
					put(grammarAccess.getAddToAccess().getLinkAssignment_0_1(), "rule__AddTo__LinkAssignment_0_1");
					put(grammarAccess.getAddToAccess().getAddAssignment_0_2(), "rule__AddTo__AddAssignment_0_2");
					put(grammarAccess.getAddToAccess().getJointAssignment_1_1(), "rule__AddTo__JointAssignment_1_1");
					put(grammarAccess.getAddToAccess().getAddAssignment_1_2(), "rule__AddTo__AddAssignment_1_2");
					put(grammarAccess.getReuseAccess().getAddAssignment_0_2(), "rule__Reuse__AddAssignment_0_2");
					put(grammarAccess.getReuseAccess().getEditAssignment_1_1(), "rule__Reuse__EditAssignment_1_1");
					put(grammarAccess.getAssignNewValueAccess().getGetRefAssignment_1(), "rule__AssignNewValue__GetRefAssignment_1");
					put(grammarAccess.getAssignNewValueAccess().getNewReuseableAssignment_3(), "rule__AssignNewValue__NewReuseableAssignment_3");
					put(grammarAccess.getDotExpressionAccess().getTailAssignment_1_2(), "rule__DotExpression__TailAssignment_1_2");
					put(grammarAccess.getReUsableRefAccess().getReuseableAssignment_1(), "rule__ReUsableRef__ReuseableAssignment_1");
					put(grammarAccess.getInertialAccess().getNameAssignment_2(), "rule__Inertial__NameAssignment_2");
					put(grammarAccess.getInertialAccess().getInertiaAssignment_3(), "rule__Inertial__InertiaAssignment_3");
					put(grammarAccess.getInertialAccess().getMassAssignment_4(), "rule__Inertial__MassAssignment_4");
					put(grammarAccess.getInertialAccess().getOriginAssignment_5(), "rule__Inertial__OriginAssignment_5");
					put(grammarAccess.getInertiaAccess().getNameAssignment_2(), "rule__Inertia__NameAssignment_2");
					put(grammarAccess.getInertiaAccess().getIxxAssignment_4(), "rule__Inertia__IxxAssignment_4");
					put(grammarAccess.getInertiaAccess().getIxyAssignment_6(), "rule__Inertia__IxyAssignment_6");
					put(grammarAccess.getInertiaAccess().getIxzAssignment_8(), "rule__Inertia__IxzAssignment_8");
					put(grammarAccess.getInertiaAccess().getIyyAssignment_10(), "rule__Inertia__IyyAssignment_10");
					put(grammarAccess.getInertiaAccess().getIyzAssignment_12(), "rule__Inertia__IyzAssignment_12");
					put(grammarAccess.getInertiaAccess().getIzzAssignment_14(), "rule__Inertia__IzzAssignment_14");
					put(grammarAccess.getVisualAccess().getNameAssignment_2(), "rule__Visual__NameAssignment_2");
					put(grammarAccess.getVisualAccess().getGeometryAssignment_4(), "rule__Visual__GeometryAssignment_4");
					put(grammarAccess.getVisualAccess().getOriginAssignment_5(), "rule__Visual__OriginAssignment_5");
					put(grammarAccess.getVisualAccess().getMaterialAssignment_6_1(), "rule__Visual__MaterialAssignment_6_1");
					put(grammarAccess.getOriginAccess().getNameAssignment_2(), "rule__Origin__NameAssignment_2");
					put(grammarAccess.getOriginAccess().getXAssignment_4(), "rule__Origin__XAssignment_4");
					put(grammarAccess.getOriginAccess().getYAssignment_6(), "rule__Origin__YAssignment_6");
					put(grammarAccess.getOriginAccess().getZAssignment_8(), "rule__Origin__ZAssignment_8");
					put(grammarAccess.getOriginAccess().getRollAssignment_9_1(), "rule__Origin__RollAssignment_9_1");
					put(grammarAccess.getOriginAccess().getPitchAssignment_10_1(), "rule__Origin__PitchAssignment_10_1");
					put(grammarAccess.getOriginAccess().getYawAssignment_11_1(), "rule__Origin__YawAssignment_11_1");
					put(grammarAccess.getMassAccess().getNameAssignment_2(), "rule__Mass__NameAssignment_2");
					put(grammarAccess.getMassAccess().getMassKilogramAssignment_4(), "rule__Mass__MassKilogramAssignment_4");
					put(grammarAccess.getCollisionAccess().getNameAssignment_1(), "rule__Collision__NameAssignment_1");
					put(grammarAccess.getCollisionAccess().getGeometryAssignment_3(), "rule__Collision__GeometryAssignment_3");
					put(grammarAccess.getCollisionAccess().getOriginAssignment_4(), "rule__Collision__OriginAssignment_4");
					put(grammarAccess.getBoxAccess().getNameAssignment_1(), "rule__Box__NameAssignment_1");
					put(grammarAccess.getBoxAccess().getHeightAssignment_3(), "rule__Box__HeightAssignment_3");
					put(grammarAccess.getBoxAccess().getLengthAssignment_5(), "rule__Box__LengthAssignment_5");
					put(grammarAccess.getBoxAccess().getWidthAssignment_7(), "rule__Box__WidthAssignment_7");
					put(grammarAccess.getCylinderAccess().getNameAssignment_1(), "rule__Cylinder__NameAssignment_1");
					put(grammarAccess.getCylinderAccess().getRadiusAssignment_3(), "rule__Cylinder__RadiusAssignment_3");
					put(grammarAccess.getCylinderAccess().getLengthAssignment_5(), "rule__Cylinder__LengthAssignment_5");
					put(grammarAccess.getMeshAccess().getNameAssignment_1(), "rule__Mesh__NameAssignment_1");
					put(grammarAccess.getMeshAccess().getPathToFileAssignment_3(), "rule__Mesh__PathToFileAssignment_3");
					put(grammarAccess.getSphereAccess().getNameAssignment_1(), "rule__Sphere__NameAssignment_1");
					put(grammarAccess.getSphereAccess().getRadiusAssignment_3(), "rule__Sphere__RadiusAssignment_3");
					put(grammarAccess.getTextureAccess().getNameAssignment_1(), "rule__Texture__NameAssignment_1");
					put(grammarAccess.getTextureAccess().getPathToFileAssignment_3(), "rule__Texture__PathToFileAssignment_3");
					put(grammarAccess.getColorAccess().getNameAssignment_1(), "rule__Color__NameAssignment_1");
					put(grammarAccess.getColorAccess().getRedAssignment_3(), "rule__Color__RedAssignment_3");
					put(grammarAccess.getColorAccess().getGreenAssignment_5(), "rule__Color__GreenAssignment_5");
					put(grammarAccess.getColorAccess().getBlueAssignment_7(), "rule__Color__BlueAssignment_7");
					put(grammarAccess.getColorAccess().getAlphaAssignment_9(), "rule__Color__AlphaAssignment_9");
					put(grammarAccess.getJointAccess().getNameAssignment_1(), "rule__Joint__NameAssignment_1");
					put(grammarAccess.getJointAccess().getChildOfAssignment_2_0_0_2(), "rule__Joint__ChildOfAssignment_2_0_0_2");
					put(grammarAccess.getJointAccess().getParentOfAssignment_2_0_0_4(), "rule__Joint__ParentOfAssignment_2_0_0_4");
					put(grammarAccess.getJointAccess().getTypeAssignment_2_0_0_6(), "rule__Joint__TypeAssignment_2_0_0_6");
					put(grammarAccess.getJointAccess().getOriginAssignment_2_0_1_0(), "rule__Joint__OriginAssignment_2_0_1_0");
					put(grammarAccess.getJointAccess().getAxisAssignment_2_0_1_1(), "rule__Joint__AxisAssignment_2_0_1_1");
					put(grammarAccess.getJointAccess().getLimitAssignment_2_0_1_2(), "rule__Joint__LimitAssignment_2_0_1_2");
					put(grammarAccess.getJointAccess().getCalibrationAssignment_2_0_1_3(), "rule__Joint__CalibrationAssignment_2_0_1_3");
					put(grammarAccess.getJointAccess().getDynamicsAssignment_2_0_1_4(), "rule__Joint__DynamicsAssignment_2_0_1_4");
					put(grammarAccess.getJointAccess().getSafetycontrollerAssignment_2_0_1_5(), "rule__Joint__SafetycontrollerAssignment_2_0_1_5");
					put(grammarAccess.getJointAccess().getIsReuseOfAssignment_2_1_1(), "rule__Joint__IsReuseOfAssignment_2_1_1");
					put(grammarAccess.getJointAccess().getChildOfAssignment_2_1_3(), "rule__Joint__ChildOfAssignment_2_1_3");
					put(grammarAccess.getJointAccess().getParentOfAssignment_2_1_5(), "rule__Joint__ParentOfAssignment_2_1_5");
					put(grammarAccess.getJointAccess().getReuseAssignment_2_1_6(), "rule__Joint__ReuseAssignment_2_1_6");
					put(grammarAccess.getAxisAccess().getNameAssignment_1(), "rule__Axis__NameAssignment_1");
					put(grammarAccess.getAxisAccess().getXAssignment_3(), "rule__Axis__XAssignment_3");
					put(grammarAccess.getAxisAccess().getYAssignment_5(), "rule__Axis__YAssignment_5");
					put(grammarAccess.getAxisAccess().getZAssignment_7(), "rule__Axis__ZAssignment_7");
					put(grammarAccess.getLimitAccess().getNameAssignment_1(), "rule__Limit__NameAssignment_1");
					put(grammarAccess.getLimitAccess().getEffortAssignment_3(), "rule__Limit__EffortAssignment_3");
					put(grammarAccess.getLimitAccess().getVelocityAssignment_5(), "rule__Limit__VelocityAssignment_5");
					put(grammarAccess.getLimitAccess().getLowerAssignment_6_0_1(), "rule__Limit__LowerAssignment_6_0_1");
					put(grammarAccess.getLimitAccess().getUpperAssignment_6_1_1(), "rule__Limit__UpperAssignment_6_1_1");
					put(grammarAccess.getCalibrationAccess().getNameAssignment_2(), "rule__Calibration__NameAssignment_2");
					put(grammarAccess.getCalibrationAccess().getRisingAssignment_3_0_1(), "rule__Calibration__RisingAssignment_3_0_1");
					put(grammarAccess.getCalibrationAccess().getFallingAssignment_3_1_1(), "rule__Calibration__FallingAssignment_3_1_1");
					put(grammarAccess.getDynamicsAccess().getNameAssignment_2(), "rule__Dynamics__NameAssignment_2");
					put(grammarAccess.getDynamicsAccess().getFrictionAssignment_3_0_1(), "rule__Dynamics__FrictionAssignment_3_0_1");
					put(grammarAccess.getDynamicsAccess().getDampingAssignment_3_1_1(), "rule__Dynamics__DampingAssignment_3_1_1");
					put(grammarAccess.getSafetyControllerAccess().getNameAssignment_1(), "rule__SafetyController__NameAssignment_1");
					put(grammarAccess.getSafetyControllerAccess().getK_velocityAssignment_3(), "rule__SafetyController__K_velocityAssignment_3");
					put(grammarAccess.getSafetyControllerAccess().getK_positionAssignment_4_0_1(), "rule__SafetyController__K_positionAssignment_4_0_1");
					put(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitAssignment_4_1_1(), "rule__SafetyController__SoftLowerLimitAssignment_4_1_1");
					put(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitAssignment_4_2_1(), "rule__SafetyController__SoftUpperLimitAssignment_4_2_1");
					put(grammarAccess.getURDFAttrSignedNumericAccess().getValueAssignment(), "rule__URDFAttrSignedNumeric__ValueAssignment");
					put(grammarAccess.getURDFAttrFloatAccess().getValueAssignment(), "rule__URDFAttrFloat__ValueAssignment");
					put(grammarAccess.getURDFAttrINTAccess().getValueAssignment(), "rule__URDFAttrINT__ValueAssignment");
					put(grammarAccess.getURDFAttrNumericAccess().getValueAssignment(), "rule__URDFAttrNumeric__ValueAssignment");
					put(grammarAccess.getURDFAttrSTRINGAccess().getValueAssignment(), "rule__URDFAttrSTRING__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDslParser typedParser = (InternalDslParser) parser;
			typedParser.entryRuleRobot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
